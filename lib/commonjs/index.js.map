{"version":3,"names":["_reactNative","require","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","ttlockModule","NativeModules","Ttlock","ttlockEventEmitter","NativeEventEmitter","subscriptionMap","Map","TtGateway","startScan","callback","subscription","GatewayEvent","ScanGateway","remove","addListener","set","startScanGateway","stopScan","stopScanGateway","delete","connect","mac","defaultCallback","state","connectState","ConnectState","Timeout","Success","Fail","getNearbyWifi","progress","finish","fail","ScanWifi","responData","initGateway","object","success","errorCode","description","TTLockEvent","ScanLock","initLock","getLockVersionWithLockMac","lockMac","resetLock","lockData","resetEkey","controlLock","control","dataArray","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","lockState","LockState","Locked","Unlock","Unknow","CarOnLock","addCard","cycleList","AddCardProgrress","cardNumber","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","AddFingerprintProgress","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockOperationRecord","type","getLockAutomaticLockingPeriodicTime","data","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","addPassageMode","mode","days","weekly","LockPassageMode","Weekly","monthly","Monthly","clearAllPassageModes","getBluetoothState","bluetoothState","BluetoothState","Resetting","Unsupport","Unauthorized","On","Off","supportFunction","fuction","LockFunction","LockRecordType","LockConfigType","LockControlType","GatewayType"],"sources":["index.tsx"],"sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  // EmitterSubscription,\n} from 'react-native';\n\nimport type { ScanGatewayModal, ScanLockModal, InitGatewayParam, CardFingerprintCycleParam, ScanWifiModal, InitGatewayModal, LockVersion } from './types'\n\nconst ttlockModule = NativeModules.Ttlock;\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\n\nconst subscriptionMap = new Map();\n\nclass TtGateway {\n  static defaultCallback = function () { };\n\n  /**\n   * Scan for nearby gateways （Only newly powered gateways can be scanned）\n   * @param callback  If there is a reenergized gateway nearby, the callback will be performed multiple times\n   */\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanGateway, callback);\n    subscriptionMap.set(GatewayEvent.ScanGateway, subscription);\n    ttlockModule.startScanGateway();\n  }\n\n  /**\n   * Stop scanning nearby Bluetooth locks\n   */\n  static stopScan() {\n    ttlockModule.stopScanGateway();\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(GatewayEvent.ScanGateway);\n  }\n\n  /**\n   * Connected to the gateway Only newly powered gateways can be connected）\n   * @param mac \n   * @param callback \n   */\n  static connect(mac: string, callback: ((state: ConnectState) => void)) {\n    callback = callback || this.defaultCallback;\n    ttlockModule.connect(mac, (state: number) => {\n      let connectState = [ConnectState.Timeout,ConnectState.Success,ConnectState.Fail][state];\n      callback!(connectState);\n    });\n  }\n\n  /**\n   * Read wifi near the gateway\n   * @param progress \n   * @param finish \n   * @param fail \n   */\n  static getNearbyWifi(progress: ((scanWifiModal: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    finish = finish || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanWifi, (responData) => {\n      progress(responData);\n    });\n\n    ttlockModule.getNearbyWifi((state: number) => {\n      subscription.remove();\n      if (state === 0) {\n        finish!();\n      } else {\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\n      }\n    });\n  }\n\n  /**\n   * Initialize gateway\n   * @param object \n   * @param success \n   * @param fail \n   */\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initGateway(object, success, (errorCode: number) => {\n      let description = \"Init gateway fail.\";\n      if (errorCode === 3) {\n        description += \"Wrong wifi\";\n      } else if (errorCode === 4) {\n        description += \"Wrong wifi password\";\n      }\n      fail!(errorCode, description);\n    });\n  }\n\n}\n\n\nclass Ttlock {\n\n  static defaultCallback = function () { };\n\n  \n\n  /**\n   * Scan for nearby Bluetooth locks\n   * @param callback  The Callback will be executed multiple times if there is a Bluetooth lock nearby\n   */\n  static startScan(callback: null | ((scanLockModal: ScanLockModal) => void)) {\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    callback = callback || this.defaultCallback;\n    subscription = ttlockEventEmitter.addListener(TTLockEvent.ScanLock, callback);\n    subscriptionMap.set(TTLockEvent.ScanLock, subscription);\n    ttlockModule.startScan();\n  }\n\n  /**\n   * Stop scanning nearby Bluetooth locks\n   */\n  static stopScan() {\n    ttlockModule.stopScan();\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(TTLockEvent.ScanLock);\n  }\n\n  /**\n   * Initialize lock\n   * @param object {lockMac:\"ea:09:e2:99:33\", lockVersion:\"{\\\"protocolType\\\":5,\\\"protocolVersion\\\":3,\\\"scene\\\":2,\\\"groupId\\\":1,\\\"orgId\\\":1}\"}\n   * @param success \n   * @param fail \n   */\n  static initLock(object: object, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initLock(object, success, fail);\n  }\n\n\n  static getLockVersionWithLockMac(lockMac: string, success: null | ((lockVersion: LockVersion) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockVersionWithLockMac(lockMac, success, fail);\n  }\n\n\n  /**\n   * Reset the lock.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetLock(lockData, success, fail);\n  }\n\n  /**\n   * Reset the all keys.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetEkey(lockData, success, fail);\n  }\n\n  /**\n   * Controle the lock Unlock or lock or other operations\n   * @param control  LockControlType\n   * @param lockData string\n   * @param success successful callback\n   * @param fail failed callback\n   */\n  static controlLock(control: LockControlType, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    fail = fail || this.defaultCallback;\n    success = success || this.defaultCallback;\n    ttlockModule.controlLock(control, lockData, (dataArray: number[]) => {\n      success!(dataArray[0], dataArray[1], dataArray[2]);\n    }, fail);\n  }\n\n  /**\n   * Create a custom passcode. \n   * @param passcode The password must be 4-9 digits\n   * @param startDate Timestamp millisecond. The start valid time of the password.\n   * @param endDate Timestamp millisecond. The expiration time of the password\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Change the password and the expiry date of the password.\n   * @param passcodeOrigin origin password\n   * @param passcodeNew new password must be 4-9 digits\n   * @param startDate Timestamp millisecond. The start valid time of the password.\n   * @param endDate Timestamp millisecond. The expiration time of the password\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the passcode.\n   * @param passcode \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\n  }\n\n  /**\n   * All passcode will be invalid after reset （Custom passcode and Admin passcode is still valid）\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetPasscode(lockData, success, fail);\n  }\n\n  /**\n   * Get the lock state (unlock or lock)\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockSwitchState(lockData: string, success: null | ((state: LockState) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\n      let lockState = [\n        LockState.Locked,\n        LockState.Unlock,\n        LockState.Unknow,\n        LockState.CarOnLock\n      ][state];\n      success!(lockState);\n    }, fail);\n  }\n\n  /**\n   * Add a card to unlock the lock\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the card.\n   * @param endDate Timestamp millisecond. The expiration time of the card\n   * @param lockData \n   * @param progress \n   * @param success \n   * @param fail \n   */\n  static addCard(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddCardProgrress, () => {\n      progress();\n    });\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\n      subscription.remove();\n      success!(cardNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  /**\n   * Modify the validity period of the card\n   * @param cardNumber \n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the card.\n   * @param endDate Timestamp millisecond. The expiration time of the card\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the card\n   * @param cardNumber \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\n  }\n\n  /**\n   * Clear all cards\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllCards(lockData, success, fail);\n  }\n\n  /**\n   * Add  fingerprint to unlock the lock\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\n   * @param lockData \n   * @param progress \n   * @param success \n   * @param fail \n   */\n  static addFingerprint(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddFingerprintProgress, (dataArray: number[]) => {\n      progress!(dataArray[0], dataArray[1]);\n    });\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\n      subscription.remove();\n      success!(fingerprintNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  /**\n   * Modify the validity period of the fingerprint\n   * @param fingerprintNumber \n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the fingerprint\n   * @param fingerprintNumber \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\n  }\n\n  /**\n   * Clear all fingerprints\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\n  }\n\n  /**\n   * Modify admin passcode\n   * @param adminPasscode  adminPasscode must be 4-9 digits\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\n  }\n\n  /**\n   * Set the lock time\n   * @param timestamp  Millisecond.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock time\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockTime(lockData, success, fail);\n  }\n\n\n  /**\n   * Read the operation record of the lock. \n   * @param type LockRecordType\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockOperationRecord(type: LockRecordType, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockOperationRecord(type, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock automatic locking periodic time\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, (data: number[]) => {\n      success!(data[0],data[1],data[2]);\n    }, fail);\n  }\n\n  /**\n   * Set the lock automatic locking periodic time\n   * @param seconds \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock remote unlock switch state\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\n  }\n\n  /**\n   * Set the lock remote unlock switch state\n   * @param isOn \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\n  }\n\n  /**\n   * Get config of the lock\n   * @param config \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockConfig(config: LockConfigType, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockConfig(config, lockData, (data: any[]) => {\n      success!(data[0],data[1]);\n    }, fail);\n  }\n\n  /**\n   * Set config of the lock\n   * @param config \n   * @param isOn \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockConfig(config: LockConfigType, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\n  }\n\n\n  /**\n   * Set the lock always unlock.\n   * @param mode LockPassageMode\n   * @param days \n   * type = LockPassageMode.Weekly then days should be 1~7 Monday ~ Sunday, [1,3,6] \n   * type = LockPassageMode.Monthly then days should be 1~31, [1,7,29,31]\n   * @param startDate The valid time of the passage mode\n   * @param endDate The invalid time of the passage mode\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static addPassageMode(mode: LockPassageMode, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let weekly = LockPassageMode.Weekly === mode ? days : [];\n    let monthly = LockPassageMode.Monthly === mode ? days : [];\n\n    ttlockModule.addPassageMode(mode, weekly, monthly, startDate, endDate, lockData, success, fail);\n  }\n\n\n  /**\n   * Clear all passage mode\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\n  }\n\n\n  /**\n   * Monitor phone's Bluetooth status\n   * @param callback \n   */\n  /*\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\n      let bluetoothStateList = [\n        { code: 0, description: \"The bluetooth state is unknow\" },\n        { code: 1, description: \"The bluetooth state is resetting\" },\n        { code: 2, description: \"Current device unsupport bluetooth\" },\n        { code: 3, description: \"The bluetooth is unauthorized\" },\n        { code: 4, description: \"The bluetooth is ok\" },\n        { code: 5, description: \"The bluetooth is off\" },\n      ]\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\n    });\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\n  }\n\n\n  static deleteBluetoothStateListener() {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\n  }\n\n*/\n\n\n  /**\n   * \n   * @param callback \n   */\n  static getBluetoothState(callback: (state: BluetoothState) => void) {\n    callback = callback || this.defaultCallback;\n    ttlockModule.getBluetoothState((state: number) => {\n      var bluetoothState = [\n        BluetoothState.Unknow,\n        BluetoothState.Resetting,\n        BluetoothState.Unsupport,\n        BluetoothState.Unauthorized,\n        BluetoothState.On,\n        BluetoothState.Off\n      ][state];\n      callback(bluetoothState);\n    });\n  }\n\n  static supportFunction(fuction: LockFunction, lockData: string, callback: (isSupport: boolean) => void) {\n    ttlockModule.supportFunction(fuction, lockData, callback);\n  }\n\n}\n\nenum BluetoothState {\n  Unknow = 0,\n  Resetting = 1,\n  Unsupport = 2,\n  Unauthorized = 3,\n  On = 4,\n  Off = 5\n}\n\nenum LockFunction {\n  Passcode = 0,\n  IcCard = 1,\n  Fingerprint = 2,\n  Wristband = 3,\n  AutoLock = 4,\n  DeletePasscode = 5,\n  ManagePasscode = 7,\n  Locking = 8,\n  PasscodeVisible = 9,\n  GatewayUnlock = 10,\n  LockFreeze = 11,\n  CyclePassword = 12,\n  DoorSensor = 13,\n  RemoteUnlockSwicth = 14,\n  AudioSwitch = 15,\n  NbIot = 16,\n  GetAdminPasscode = 18,\n  HtelCard = 19,\n  NoClock = 20,\n  NoBroadcastInNormal = 21,\n  PassageMode = 22,\n  TurnOffAutoLock = 23,\n  WirelessKeypad = 24,\n  Light = 25,\n  HotelCardBlacklist = 26,\n  IdentityCard = 27,\n  TamperAlert = 28,\n  ResetButton = 29,\n  PrivacyLock = 30,\n  DeadLock = 32,\n  CyclicCardOrFingerprint = 34,\n  FingerVein = 37,\n  NbAwake = 39,\n}\n\nenum LockRecordType {\n  Latest = 0,\n  All = 1\n}\n\n\nenum LockConfigType {\n  Audio = 0,\n  PasscodeVisible = 1,\n  Freeze = 2,\n  TamperAlert = 3,\n  ResetButton = 4,\n  PrivacyLock = 5\n}\n\nenum LockPassageMode {\n  Weekly = 0,\n  Monthly = 1\n}\n\nenum LockControlType {\n  Unlock = 0,\n  Lock = 1\n}\n\nenum LockState {\n  Locked = 0,\n  Unlock = 1,\n  Unknow = 2,\n  CarOnLock\n}\n\nenum ConnectState {\n  Timeout = 0,\n  Success = 1,\n  Fail = 2\n}\n\nenum TTLockEvent {\n  ScanLock = \"EventScanLock\",\n  AddCardProgrress = \"EventAddCardProgrress\",\n  AddFingerprintProgress = \"EventAddFingerprintProgrress\",\n  ListenBluetoothState = \"EventBluetoothState\"\n}\n\n\nenum GatewayEvent {\n  ScanGateway = \"EventScanGateway\",\n  ScanWifi = \"EventScanWifi\"\n}\n\n\nenum GatewayType {\n  G2 =2,\n  G3 =3,\n  G4 =4\n}\n\nexport { Ttlock, TtGateway, BluetoothState, LockFunction, LockRecordType, LockConfigType, LockPassageMode, LockControlType, LockState, ConnectState, GatewayType}\nexport * from './types'\n"],"mappings":"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"}