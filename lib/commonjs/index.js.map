{"version":3,"sources":["index.tsx"],"names":["ttlockModule","NativeModules","Ttlock","ttlockEventEmitter","NativeEventEmitter","subscriptionMap","Map","TtGateway","startScan","callback","subscription","get","event","scanGateway","undefined","remove","addListener","set","startScanGateway","stopScan","stopScanGateway","delete","connect","mac","success","fail","defaultCallback","stateList","code","description","state","getNearbyWifi","progress","finish","scanWifi","responData","initGateway","object","paramObject","SSID","wifi","wifiPwd","wifiPassword","gatewayName","uid","ttlockUid","userPwd","ttlockLoginPassword","console","log","scanLock","initLock","resetLock","lockData","resetEkey","controlLock","control","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","addCard","cycleList","addCardProgrress","cardNumber","errorCode","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","addFingerprintProgress","dataArray","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockOperateRecord","type","getLockAutomaticLockingPeriodicTime","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","addPassageMode","days","weekly","lockPassageModeEnum","monthly","clearAllPassageModes","addBluetoothStateListener","bluetoothState","bluetoothStateList","deleteBluetoothStateListener","supportFunction","fuction","Object","freeze","unlock","lock","latest","all","audio","passcodeVisible","tamperAlert","resetButton","privacyLock","icCard","fingerprint","wristband","autoLock","managePasscode","locking","gatewayUnlock","lockFreeze","cyclePassword","doorSensor","remoteUnlockSwicth","audioSwitch","nbIot","getAdminPasscode","htelCard","noClock","noBroadcastInNormal","passageMode","turnOffAutoLock","wirelessKeypad","light","hotelCardBlacklist","identityCard","deadLock","cyclicCardOrFingerprint","fingerVein","nbAwake"],"mappings":"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","sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  // EmitterSubscription,\n} from 'react-native';\n\nimport type { ScanGatewayModal, ScanLockModal, InitLockParam, InitGatewayParam, CardFingerprintCycleParam, ScanWifiModal, InitGatewayModal } from './types'\n\nconst ttlockModule = NativeModules.Ttlock;\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\n\n\n\nconst subscriptionMap = new Map();\n\nclass TtGateway {\n  static defaultCallback = function () { };\n\n  static event = {\n    scanGateway: \"EventScanGateway\",\n    scanWifi: \"EventScanWifi\"\n  };\n\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\n    let subscription = subscriptionMap.get(TtGateway.event.scanGateway)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(TtGateway.event.scanGateway, callback);\n    subscriptionMap.set(TtGateway.event.scanGateway, subscription);\n    ttlockModule.startScanGateway();\n  }\n\n  static stopScan() {\n    ttlockModule.stopScanGateway();\n    let subscription = subscriptionMap.get(TtGateway.event.scanGateway)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(TtGateway.event.scanGateway);\n  }\n\n  static connect(mac: string, success: ((state: number, description: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let stateList = [\n      { code: 0, description: \"The bluetooth connect timeout\" },\n      { code: 1, description: \"The bluetooth connect success\" },\n      { code: 2, description: \"The bluetooth connect fail\" }\n    ]\n    ttlockModule.connect(mac, (state: number) => {\n      if (state === 1) {\n        success(stateList[state].code, stateList[state].description);\n      } else {\n        fail!(stateList[state].code, stateList[state].description);\n      }\n    });\n  }\n\n  static getNearbyWifi(progress: ((scanWifiModal: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n\n    progress = progress || this.defaultCallback;\n    finish = finish || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let subscription = ttlockEventEmitter.addListener(TtGateway.event.scanWifi, (responData) => {\n      progress(responData);\n    });\n\n    ttlockModule.getNearbyWifi((state: number) => {\n      subscription.remove();\n      if (state === 0) {\n        finish!();\n      } else {\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\n      }\n    });\n  }\n\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let paramObject = {\n      SSID: object.wifi,\n      wifiPwd: object.wifiPassword,\n      gatewayName: object.gatewayName,\n      uid: object.ttlockUid,\n      userPwd: object.ttlockLoginPassword\n    }\n    console.log(paramObject);\n    ttlockModule.initGateway(paramObject, success, fail);\n  }\n\n}\n\n\nclass Ttlock {\n\n  static defaultCallback = function () { };\n\n  static event = {\n    scanLock: \"EventScanLock\",\n    addCardProgrress: \"EventAddCardProgrress\",\n    addFingerprintProgress: \"EventAddFingerprintProgrress\",\n    bluetoothState: \"EventBluetoothState\"\n  };\n\n  static startScan(callback: null | ((lockScanModal: ScanLockModal) => void)) {\n    let subscription = subscriptionMap.get(Ttlock.event.scanLock)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    callback = callback || this.defaultCallback;\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.scanLock, callback);\n    subscriptionMap.set(Ttlock.event.scanLock, subscription);\n    ttlockModule.startScan();\n  }\n\n  static stopScan() {\n    ttlockModule.stopScan();\n    let subscription = subscriptionMap.get(Ttlock.event.scanLock)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(Ttlock.event.scanLock);\n  }\n\n  static initLock(object: InitLockParam, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initLock(object, success, fail);\n  }\n\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetLock(lockData, success, fail);\n  }\n\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetEkey(lockData, success, fail);\n  }\n\n  //enum control lock\n  static controlEnum = Object.freeze({\n    unlock: 0,\n    lock: 1\n  })\n\n  /**\n   * \n   * @param control controlEnum\n   * @param lockData string\n   * @param success successful callback\n   * @param fail failed callback\n   */\n  static controlLock(control: number, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    fail = fail || this.defaultCallback;\n    success = success || this.defaultCallback;\n    ttlockModule.controlLock(control, lockData, success, fail);\n  }\n\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\n  }\n\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\n  }\n\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\n  }\n\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetPasscode(lockData, success, fail);\n  }\n\n  static getLockSwitchState(lockData: string, success: null | ((state: number, description: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let stateList = [\n      { code: 0, description: \"The lock state is locked\" },\n      { code: 1, description: \"The lock state is unlocked\" },\n      { code: 2, description: \"The lock state is unknow\" },\n      { code: 3, description: \"A car on the lock\" },\n    ]\n\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\n      success!(stateList[state].code, stateList[state].description);\n    }, fail);\n  }\n\n  static addCard(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(Ttlock.event.addCardProgrress, () => {\n      progress();\n    });\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\n      subscription.remove();\n      success!(cardNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\n  }\n\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllCards(lockData, success, fail);\n  }\n\n\n  static addFingerprint(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(Ttlock.event.addFingerprintProgress, (dataArray: number[]) => {\n      progress!(dataArray[0], dataArray[1]);\n    });\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\n      subscription.remove();\n      success!(fingerprintNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\n  }\n\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\n  }\n\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\n  }\n\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\n  }\n\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockTime(lockData, success, fail);\n  }\n\n  //enum config lock\n  static lockRecordEnum = Object.freeze({\n    latest: 0,\n    all: 1\n  })\n  static getLockOperateRecord(type: number, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockOperateRecord(type, lockData, success, fail);\n  }\n\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, success, fail);\n  }\n\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\n  }\n\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\n  }\n\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\n  }\n\n\n  //enum config lock\n  static lockConfigEnum = Object.freeze({\n    audio: 0,\n    passcodeVisible: 1,\n    freeze: 2,\n    tamperAlert: 3,\n    resetButton: 4,\n    privacyLock: 5\n  })\n  static getLockConfig(config: number, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockConfig(config, lockData, success, fail);\n  }\n\n  static setLockConfig(config: number, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\n  }\n\n\n  //enum  lock passage mode\n  static lockPassageModeEnum = Object.freeze({\n    weekly: 0,\n    monthly: 1\n  })\n  static addPassageMode(type: number, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    \n    let weekly = this.lockPassageModeEnum.weekly === type ? days : [];\n    let monthly = this.lockPassageModeEnum.monthly === type ? days : [];\n\n    ttlockModule.addPassageMode(type, weekly, monthly, startDate, endDate, lockData, success, fail);\n  }\n\n\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\n  }\n\n\n\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\n      let bluetoothStateList = [\n        { code: 0, description: \"The bluetooth state is unknow\" },\n        { code: 1, description: \"The bluetooth state is resetting\" },\n        { code: 2, description: \"Current device unsupport bluetooth\" },\n        { code: 3, description: \"The bluetooth is unauthorized\" },\n        { code: 4, description: \"The bluetooth is ok\" },\n        { code: 5, description: \"The bluetooth is off\" },\n      ]\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\n    });\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\n  }\n\n  static deleteBluetoothStateListener() {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\n  }\n\n  //enum config lock\n  static lockFunction = Object.freeze({\n    passcode: 0,\n    icCard : 1,\n    fingerprint : 2,\n    wristband : 3,\n    autoLock : 4,\n    deletePasscode : 5,\n    managePasscode : 7,\n    locking : 8,\n    passcodeVisible : 9,\n    gatewayUnlock : 10,\n    lockFreeze : 11,\n    cyclePassword : 12,\n    doorSensor : 13,\n    remoteUnlockSwicth : 14,\n    audioSwitch : 15,\n    nbIot : 16,\n    getAdminPasscode : 18,\n    htelCard : 19,\n    noClock : 20,\n    noBroadcastInNormal : 21,\n    passageMode : 22,\n    turnOffAutoLock : 23,\n    wirelessKeypad : 24,\n    light : 25,\n    hotelCardBlacklist : 26,\n    identityCard : 27,\n    tamperAlert : 28,\n    resetButton : 29,\n    privacyLock : 30,\n    deadLock : 32,\n    cyclicCardOrFingerprint : 34,\n    fingerVein : 37,\n    nbAwake : 39,\n  })\n  static supportFunction(fuction: number, lockData: string, callback: (isSupport: boolean) => void) {\n    ttlockModule.supportFunction(fuction, lockData, callback);\n  }\n\n}\n\n\n\n\n\n\n\nexport { Ttlock, TtGateway }\nexport * from './types'\n"]}