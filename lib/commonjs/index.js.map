{"version":3,"names":["_reactNative","require","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","ttlockModule","NativeModules","Ttlock","ttlockEventEmitter","NativeEventEmitter","subscriptionMap","Map","TtDoorSensor","startScan","callback","subscription","get","TtDoorSensorEvent","ScanDoorSensor","remove","addListener","set","startScanDoorSensor","stopScan","stopScanDoorSensor","delete","init","mac","lockData","success","fail","defaultCallback","initDoorSensor","dataArray","errorCode","description","exports","TtRemoteKey","TtRemoteKeyEvent","ScanRemoteKey","startScanRemoteKey","stopScanRemoteKey","initRemoteKey","TtGateway","GatewayEvent","ScanGateway","startScanGateway","stopScanGateway","connect","state","connectState","ConnectState","Timeout","Success","Fail","getNearbyWifi","progress","finish","ScanWifi","responData","initGateway","object","TTLockEvent","ScanLock","initLock","getLockVersionWithLockMac","lockMac","getAccessoryElectricQuantity","accessoryType","accessoryMac","resetLock","resetEkey","controlLock","control","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","lockState","LockState","Locked","Unlock","Unknow","CarOnLock","addCard","cycleList","AddCardProgrress","cardNumber","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","AddFingerprintProgress","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockElectricQuantity","getLockOperationRecord","type","getLockAutomaticLockingPeriodicTime","data","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","setLockSoundVolume","soundVolume","getLockSoundVolume","getUnlockDirection","unlockDirection","LockUnlockDirection","Left","Right","setUnlockDirection","direction","addPassageMode","mode","days","weekly","LockPassageMode","Weekly","monthly","Monthly","clearAllPassageModes","addRemoteKey","remoteKeyMac","cycleDateList","modifyRemoteKey","deleteRemoteKey","clearAllRemoteKey","addDoorSensor","doorSensorMac","clearAllDoorSensor","setDoorSensorAlertTime","time","getBluetoothState","bluetoothState","BluetoothState","Resetting","Unsupport","Unauthorized","On","Off","supportFunction","fuction","LockFunction","LockRecordType","LockConfigType","LockSoundVolume","LockControlType","GatewayType","LockAccessoryType","GatewayIpSettingType"],"sources":["index.tsx"],"sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  // EmitterSubscription,\n} from 'react-native';\n\nimport type { ScanGatewayModal, ScanLockModal, InitGatewayParam, CycleDateParam, ScanWifiModal, InitGatewayModal, LockVersion, ScanRemoteKeyModal, ScanDoorSensorModal, DeviceSystemModal } from './types'\n\nconst ttlockModule = NativeModules.Ttlock;\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\n\nconst subscriptionMap = new Map();\n\n\n\nclass TtDoorSensor {\n\n  static defaultCallback = function () { };\n\n  static startScan(callback: ((scanModal: ScanDoorSensorModal) => void)) {\n    let subscription = subscriptionMap.get(TtDoorSensorEvent.ScanDoorSensor)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(TtDoorSensorEvent.ScanDoorSensor, callback);\n    subscriptionMap.set(TtDoorSensorEvent.ScanDoorSensor, subscription);\n    ttlockModule.startScanDoorSensor();\n  }\n\n  static stopScan() {\n    ttlockModule.stopScanDoorSensor();\n    let subscription = subscriptionMap.get(TtDoorSensorEvent.ScanDoorSensor)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(TtDoorSensorEvent.ScanDoorSensor);\n  }\n\n  static init(mac: string, lockData: string, success: ((electricQuantity: number, systemModel : DeviceSystemModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initDoorSensor(mac, lockData, (dataArray: any[]) => {\n      success!(dataArray[0], dataArray[1]);\n    }, (errorCode: number) => {\n      let description = \"Init door sensor fail.\";\n      if (errorCode === 1) {\n        description += \"Bluetooth is power off\";\n      } else if (errorCode === 2) {\n        description += \"Connect timeout\";\n      } else if (errorCode === 4) {\n        description += \"Wrong crc\";\n      }\n      fail!(errorCode, description);\n    });\n  }\n}\n\n\n\nclass TtRemoteKey {\n\n  static defaultCallback = function () { };\n\n  static startScan(callback: ((scanModal: ScanRemoteKeyModal) => void)) {\n    let subscription = subscriptionMap.get(TtRemoteKeyEvent.ScanRemoteKey)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(TtRemoteKeyEvent.ScanRemoteKey, callback);\n    subscriptionMap.set(TtRemoteKeyEvent.ScanRemoteKey, subscription);\n    ttlockModule.startScanRemoteKey();\n  }\n\n  static stopScan() {\n    ttlockModule.stopScanRemoteKey();\n    let subscription = subscriptionMap.get(TtRemoteKeyEvent.ScanRemoteKey)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(TtRemoteKeyEvent.ScanRemoteKey);\n  }\n\n  static init(mac: string, lockData: string, success: ((electricQuantity: number, systemModel : DeviceSystemModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initRemoteKey(mac, lockData, (dataArray: any[]) => {\n      success!(dataArray[0], dataArray[1]);\n    }, (errorCode: number) => {\n      let description = \"Init remote key fail.\";\n      if (errorCode === -1) {\n        description += \"Wrong CRC\";\n      } else if (errorCode === -2) {\n        description += \"Connect timeout\";\n      }\n      fail!(errorCode, description);\n    });\n  }\n}\n\nclass TtGateway {\n  static defaultCallback = function () { };\n\n  /**\n   * Scan for nearby gateways （Only newly powered gateways can be scanned）\n   * @param callback  If there is a reenergized gateway nearby, the callback will be performed multiple times\n   */\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanGateway, callback);\n    subscriptionMap.set(GatewayEvent.ScanGateway, subscription);\n    ttlockModule.startScanGateway();\n  }\n\n  /**\n   * Stop scanning nearby Bluetooth locks\n   */\n  static stopScan() {\n    ttlockModule.stopScanGateway();\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(GatewayEvent.ScanGateway);\n  }\n\n  /**\n   * Connected to the gateway Only newly powered gateways can be connected）\n   * @param mac \n   * @param callback \n   */\n  static connect(mac: string, callback: ((state: ConnectState) => void)) {\n    callback = callback || this.defaultCallback;\n    ttlockModule.connect(mac, (state: number) => {\n      let connectState = [ConnectState.Timeout, ConnectState.Success, ConnectState.Fail][state];\n      callback!(connectState);\n    });\n  }\n\n  /**\n   * Read wifi near the gateway\n   * @param progress \n   * @param finish \n   * @param fail \n   */\n  static getNearbyWifi(progress: ((scanWifiModalList: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    finish = finish || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanWifi, (responData) => {\n      progress(responData);\n    });\n\n    ttlockModule.getNearbyWifi((state: number) => {\n      subscription.remove();\n      if (state === 0) {\n        finish!();\n      } else {\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\n      }\n    });\n  }\n\n  /**\n   * Initialize gateway\n   * @param object \n   * @param success \n   * @param fail \n   */\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initGateway(object, success, (errorCode: number) => {\n      let description = \"Init gateway fail.\";\n      if (errorCode === 3) {\n        description += \"Wrong wifi\";\n      } else if (errorCode === 4) {\n        description += \"Wrong wifi password\";\n      }\n      fail!(errorCode, description);\n    });\n  }\n\n}\n\n\nclass Ttlock {\n\n  static defaultCallback = function () { };\n\n  /**\n   * Scan for nearby Bluetooth locks\n   * @param callback  The Callback will be executed multiple times if there is a Bluetooth lock nearby\n   */\n  static startScan(callback: null | ((scanLockModal: ScanLockModal) => void)) {\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    callback = callback || this.defaultCallback;\n    subscription = ttlockEventEmitter.addListener(TTLockEvent.ScanLock, callback);\n    subscriptionMap.set(TTLockEvent.ScanLock, subscription);\n    ttlockModule.startScan();\n  }\n\n  /**\n   * Stop scanning nearby Bluetooth locks\n   */\n  static stopScan() {\n    ttlockModule.stopScan();\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(TTLockEvent.ScanLock);\n  }\n\n  /**\n   * Initialize lock\n   * @param object {lockMac:\"ea:09:e2:99:33\", lockVersion:\"{\\\"protocolType\\\":5,\\\"protocolVersion\\\":3,\\\"scene\\\":2,\\\"groupId\\\":1,\\\"orgId\\\":1}\"}\n   * @param success \n   * @param fail \n   */\n  static initLock(object: object, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initLock(object, success, fail);\n  }\n\n\n  static getLockVersionWithLockMac(lockMac: string, success: null | ((lockVersion: LockVersion) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockVersionWithLockMac(lockMac, success, fail);\n  }\n\n  static getAccessoryElectricQuantity(accessoryType : LockAccessoryType, accessoryMac: string, lockData: string, success: ((electricQuantity : number, updateDate: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getAccessoryElectricQuantity(accessoryType, accessoryMac,lockData,(dataArray: number[]) => {\n      success!(dataArray[0], dataArray[1]);\n    },fail);\n  }\n\n\n  /**\n   * Reset the lock.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetLock(lockData, success, fail);\n  }\n\n  /**\n   * Reset the all keys.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetEkey(lockData, success, fail);\n  }\n\n  /**\n   * Controle the lock Unlock or lock or other operations\n   * @param control  LockControlType\n   * @param lockData string\n   * @param success successful callback\n   * @param fail failed callback\n   */\n  static controlLock(control: LockControlType, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    fail = fail || this.defaultCallback;\n    success = success || this.defaultCallback;\n    ttlockModule.controlLock(control, lockData, (dataArray: number[]) => {\n      success!(dataArray[0], dataArray[1], dataArray[2]);\n    }, fail);\n  }\n\n  /**\n   * Create a custom passcode. \n   * @param passcode The password must be 4-9 digits\n   * @param startDate Timestamp millisecond. The start valid time of the password.\n   * @param endDate Timestamp millisecond. The expiration time of the password\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Change the password and the expiry date of the password.\n   * @param passcodeOrigin origin password\n   * @param passcodeNew new password must be 4-9 digits\n   * @param startDate Timestamp millisecond. The start valid time of the password.\n   * @param endDate Timestamp millisecond. The expiration time of the password\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the passcode.\n   * @param passcode \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\n  }\n\n  /**\n   * All passcode will be invalid after reset （Custom passcode and Admin passcode is still valid）\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetPasscode(lockData, success, fail);\n  }\n\n  /**\n   * Get the lock state (unlock or lock)\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockSwitchState(lockData: string, success: null | ((state: LockState) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\n      let lockState = [\n        LockState.Locked,\n        LockState.Unlock,\n        LockState.Unknow,\n        LockState.CarOnLock\n      ][state];\n      success!(lockState);\n    }, fail);\n  }\n\n  /**\n   * Add a card to unlock the lock\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the card.\n   * @param endDate Timestamp millisecond. The expiration time of the card\n   * @param lockData \n   * @param progress \n   * @param success \n   * @param fail \n   */\n  static addCard(cycleList: null | CycleDateParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddCardProgrress, () => {\n      progress();\n    });\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\n      subscription.remove();\n      success!(cardNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  /**\n   * Modify the validity period of the card\n   * @param cardNumber \n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the card.\n   * @param endDate Timestamp millisecond. The expiration time of the card\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CycleDateParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the card\n   * @param cardNumber \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\n  }\n\n  /**\n   * Clear all cards\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllCards(lockData, success, fail);\n  }\n\n  /**\n   * Add  fingerprint to unlock the lock\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\n   * @param lockData \n   * @param progress \n   * @param success \n   * @param fail \n   */\n  static addFingerprint(cycleList: null | CycleDateParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddFingerprintProgress, (dataArray: number[]) => {\n      progress!(dataArray[0], dataArray[1]);\n    });\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\n      subscription.remove();\n      success!(fingerprintNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  /**\n   * Modify the validity period of the fingerprint\n   * @param fingerprintNumber \n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CycleDateParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the fingerprint\n   * @param fingerprintNumber \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\n  }\n\n  /**\n   * Clear all fingerprints\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\n  }\n\n  /**\n   * Modify admin passcode\n   * @param adminPasscode  adminPasscode must be 4-9 digits\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\n  }\n\n  /**\n   * Set the lock time\n   * @param timestamp  Millisecond.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock time\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockTime(lockData, success, fail);\n  }\n\n  static getLockElectricQuantity(lockData: string, success: null | ((electricQuantity: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    fail = fail || this.defaultCallback;\n    success = success || this.defaultCallback;\n    ttlockModule.getLockElectricQuantity(lockData, success, fail);\n  }\n\n  /**\n   * Read the operation record of the lock. \n   * @param type LockRecordType\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockOperationRecord(type: LockRecordType, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockOperationRecord(type, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock automatic locking periodic time\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, (data: number[]) => {\n      success!(data[0], data[1], data[2]);\n    }, fail);\n  }\n\n  /**\n   * Set the lock automatic locking periodic time\n   * @param seconds \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock remote unlock switch state\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\n  }\n\n  /**\n   * Set the lock remote unlock switch state\n   * @param isOn \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\n  }\n\n  /**\n   * Get config of the lock\n   * @param config \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockConfig(config: LockConfigType, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockConfig(config, lockData, (data: any[]) => {\n      success!(data[0], data[1]);\n    }, fail);\n  }\n\n  /**\n   * Set config of the lock\n   * @param config \n   * @param isOn \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockConfig(config: LockConfigType, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\n  }\n\n\n  static setLockSoundVolume(soundVolume: LockSoundVolume, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockSoundVolume(soundVolume, lockData, success, fail);\n  }\n\n  static getLockSoundVolume(lockData: string, success: ((lockSoundVolume: LockSoundVolume) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockSoundVolume(lockData, (soundVolume: number) => {\n      success(soundVolume);\n    }, fail);\n  }\n\n\n  static getUnlockDirection(lockData: string, success: ((direction: LockUnlockDirection) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getUnlockDirection(lockData, (unlockDirection: number) => {\n      success(unlockDirection === 1 ? LockUnlockDirection.Left : LockUnlockDirection.Right);\n    }, fail);\n  }\n\n\n  static setUnlockDirection(direction: LockUnlockDirection, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setUnlockDirection(direction, lockData, success, fail);\n  }\n\n\n  /**\n   * Set the lock always unlock.\n   * @param mode LockPassageMode\n   * @param days \n   * type = LockPassageMode.Weekly then days should be 1~7 Monday ~ Sunday, [1,3,6] \n   * type = LockPassageMode.Monthly then days should be 1~31, [1,7,29,31]\n   * @param startDate The valid time of the passage mode\n   * @param endDate The invalid time of the passage mode\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static addPassageMode(mode: LockPassageMode, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let weekly = LockPassageMode.Weekly === mode ? days : [];\n    let monthly = LockPassageMode.Monthly === mode ? days : [];\n\n    ttlockModule.addPassageMode(mode, weekly, monthly, startDate, endDate, lockData, success, fail);\n  }\n\n\n  /**\n   * Clear all passage mode\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\n  }\n\n  static addRemoteKey(remoteKeyMac: string, cycleDateList: null | CycleDateParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleDateList = cycleDateList || [];\n    ttlockModule.addRemoteKey(remoteKeyMac, cycleDateList, startDate, endDate, lockData, success, fail);\n  }\n\n  static modifyRemoteKey(remoteKeyMac: string, cycleDateList: null | CycleDateParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleDateList = cycleDateList || [];\n    ttlockModule.modifyRemoteKey(remoteKeyMac, cycleDateList, startDate, endDate, lockData, success, fail);\n  }\n\n  static deleteRemoteKey(remoteKeyMac: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteRemoteKey(remoteKeyMac, lockData, success, fail);\n  }\n\n  static clearAllRemoteKey(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllRemoteKey(lockData, success, fail);\n  }\n\n\n  static addDoorSensor(doorSensorMac: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.addDoorSensor(doorSensorMac, lockData, success, fail);\n  }\n\n  static clearAllDoorSensor(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllDoorSensor(lockData, success, fail);\n  }\n\n\n  static setDoorSensorAlertTime(time: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setDoorSensorAlertTime(time, lockData, success, fail);\n  }\n\n  /**\n   * Monitor phone's Bluetooth status\n   * @param callback \n   */\n  /*\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\n      let bluetoothStateList = [\n        { code: 0, description: \"The bluetooth state is unknow\" },\n        { code: 1, description: \"The bluetooth state is resetting\" },\n        { code: 2, description: \"Current device unsupport bluetooth\" },\n        { code: 3, description: \"The bluetooth is unauthorized\" },\n        { code: 4, description: \"The bluetooth is ok\" },\n        { code: 5, description: \"The bluetooth is off\" },\n      ]\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\n    });\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\n  }\n\n\n  static deleteBluetoothStateListener() {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\n  }\n\n*/\n\n\n  /**\n   * \n   * @param callback \n   */\n  static getBluetoothState(callback: (state: BluetoothState) => void) {\n    callback = callback || this.defaultCallback;\n    ttlockModule.getBluetoothState((state: number) => {\n      var bluetoothState = [\n        BluetoothState.Unknow,\n        BluetoothState.Resetting,\n        BluetoothState.Unsupport,\n        BluetoothState.Unauthorized,\n        BluetoothState.On,\n        BluetoothState.Off\n      ][state];\n      callback(bluetoothState);\n    });\n  }\n\n  static supportFunction(fuction: LockFunction, lockData: string, callback: (isSupport: boolean) => void) {\n    ttlockModule.supportFunction(fuction, lockData, callback);\n  }\n\n}\n\nenum BluetoothState {\n  Unknow = 0,\n  Resetting = 1,\n  Unsupport = 2,\n  Unauthorized = 3,\n  On = 4,\n  Off = 5\n}\n\nenum LockFunction {\n  Passcode = 0,\n  IcCard = 1,\n  Fingerprint = 2,\n  Wristband = 3,\n  AutoLock = 4,\n  DeletePasscode = 5,\n  ManagePasscode = 7,\n  Locking = 8,\n  PasscodeVisible = 9,\n  GatewayUnlock = 10,\n  LockFreeze = 11,\n  CyclePassword = 12,\n  RemoteUnlockSwicth = 14,\n  AudioSwitch = 15,\n  NbIot = 16,\n  GetAdminPasscode = 18,\n  HtelCard = 19,\n  NoClock = 20,\n  NoBroadcastInNormal = 21,\n  PassageMode = 22,\n  TurnOffAutoLock = 23,\n  RemoteKeypad = 24,\n  Light = 25,\n  HotelCardBlacklist = 26,\n  IdentityCard = 27,\n  TamperAlert = 28,\n  ResetButton = 29,\n  PrivacyLock = 30,\n  DeadLock = 32,\n  CyclicCardOrFingerprint = 34,\n  UnlockDirection = 36,\n  FingerVein = 37,\n  NbAwake = 39,\n  RecoverCyclePasscode = 40,\n  RemoteKey = 41,\n  GetAccessoryElectricQuantity = 42,\n  SoundVolume = 43,\n  QRCode = 44,\n  SensorState = 45,\n  PassageModeAutoUn = 46,\n  DoorSensor = 50,\n  DoorSensorAlert = 51,\n  Sensitivity = 52,\n  Face = 53,\n  CpuCard = 55,\n  Wifi = 56,\n  WifiStaticIP = 58,\n  PasscodeKeyNumber = 60,\n}\n\nenum LockRecordType {\n  Latest = 0,\n  All = 1\n}\n\n\nenum LockConfigType {\n  Audio = 0,\n  PasscodeVisible = 1,\n  Freeze = 2,\n  TamperAlert = 3,\n  ResetButton = 4,\n  PrivacyLock = 5\n}\n\nenum LockSoundVolume {\n  On = -1,\n  Off = 0,\n  Livel_1 = 1,\n  Livel_2 = 2,\n  Livel_3 = 3,\n  Livel_4 = 4,\n  Livel_5 = 5\n}\n\n\nenum LockUnlockDirection {\n  Left = 1,\n  Right = 2\n}\n\nenum LockPassageMode {\n  Weekly = 0,\n  Monthly = 1\n}\n\nenum LockControlType {\n  Unlock = 0,\n  Lock = 1\n}\n\nenum LockState {\n  Locked = 0,\n  Unlock = 1,\n  Unknow = 2,\n  CarOnLock\n}\n\nenum ConnectState {\n  Timeout = 0,\n  Success = 1,\n  Fail = 2\n}\n\nenum TTLockEvent {\n  ScanLock = \"EventScanLock\",\n  AddCardProgrress = \"EventAddCardProgrress\",\n  AddFingerprintProgress = \"EventAddFingerprintProgrress\",\n  ListenBluetoothState = \"EventBluetoothState\",\n}\n\nenum TtRemoteKeyEvent {\n  ScanRemoteKey = \"EventScanRemoteKey\"\n}\n\nenum TtDoorSensorEvent {\n  ScanDoorSensor = \"EventScanDoorSensor\"\n}\n\nenum GatewayEvent {\n  ScanGateway = \"EventScanGateway\",\n  ScanWifi = \"EventScanWifi\"\n}\n\n\nenum GatewayType {\n  G2 = 2,\n  G3 = 3,\n  G4 = 4\n}\n\n\nenum LockAccessoryType {\n  KEYPAD = 1,\n  REMOTE_KEY = 2,\n  DOOR_SENSOR = 3\n}\n\nenum GatewayIpSettingType {\n  STATIC_IP = 0,\n  DHCP = 1\n}\n\nexport { Ttlock, TtGateway, TtRemoteKey, TtDoorSensor, BluetoothState, LockFunction, LockRecordType, LockConfigType, LockPassageMode, LockControlType, LockState, ConnectState, GatewayType, GatewayIpSettingType, LockSoundVolume, TtRemoteKeyEvent, TtDoorSensorEvent, LockUnlockDirection, LockAccessoryType, ScanLockModal, ScanRemoteKeyModal, ScanDoorSensorModal, DeviceSystemModal}\n"],"mappings":"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"}