{"version":3,"sources":["index.tsx"],"names":["ttlockModule","NativeModules","Ttlock","ttlockEventEmitter","NativeEventEmitter","subscriptionMap","Map","TtGateway","startScan","callback","subscription","get","GatewayEvent","ScanGateway","undefined","remove","addListener","set","startScanGateway","stopScan","stopScanGateway","delete","connect","mac","success","fail","defaultCallback","state","ConnectState","Success","Timeout","Fail","getNearbyWifi","progress","finish","ScanWifi","responData","initGateway","object","errorCode","description","TTLockEvent","ScanLock","initLock","resetLock","lockData","resetEkey","controlLock","control","dataArray","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","lockState","LockState","Locked","Unlock","Unknow","CarOnLock","addCard","cycleList","AddCardProgrress","cardNumber","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","AddFingerprintProgress","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockOperationRecord","type","getLockAutomaticLockingPeriodicTime","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","addPassageMode","mode","days","weekly","LockPassageMode","Weekly","monthly","Monthly","clearAllPassageModes","getBluetoothState","bluetoothState","BluetoothState","Resetting","Unsupport","Unauthorized","On","Off","supportFunction","fuction","LockFunction","LockRecordType","LockConfigType","LockControlType"],"mappings":"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","sourcesContent":["import {\r\n  NativeModules,\r\n  NativeEventEmitter,\r\n  // EmitterSubscription,\r\n} from 'react-native';\r\n\r\nimport type { ScanGatewayModal, ScanLockModal, InitGatewayParam, CardFingerprintCycleParam, ScanWifiModal, InitGatewayModal } from './types'\r\n\r\nconst ttlockModule = NativeModules.Ttlock;\r\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\r\n\r\n\r\n\r\nconst subscriptionMap = new Map();\r\n\r\nclass TtGateway {\r\n  static defaultCallback = function () { };\r\n\r\n  /**\r\n   * Scan for nearby gateways （Only newly powered gateways can be scanned）\r\n   * @param callback  If there is a reenergized gateway nearby, the callback will be performed multiple times\r\n   */\r\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\r\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanGateway, callback);\r\n    subscriptionMap.set(GatewayEvent.ScanGateway, subscription);\r\n    ttlockModule.startScanGateway();\r\n  }\r\n\r\n  /**\r\n   * Stop scanning nearby Bluetooth locks\r\n   */\r\n  static stopScan() {\r\n    ttlockModule.stopScanGateway();\r\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(GatewayEvent.ScanGateway);\r\n  }\r\n\r\n  /**\r\n   * Connected to the gateway Only newly powered gateways can be connected）\r\n   * @param mac \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static connect(mac: string, success: ((state: ConnectState) => void), fail: null | ((state: ConnectState) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.connect(mac, (state: number) => {\r\n      if (state === 1) {\r\n        success(ConnectState.Success);\r\n      } else if (state === 0){\r\n        fail!(ConnectState.Timeout);\r\n      }else{\r\n        fail!(ConnectState.Fail);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Read wifi near the gateway\r\n   * @param progress \r\n   * @param finish \r\n   * @param fail \r\n   */\r\n  static getNearbyWifi(progress: ((scanWifiModal: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    finish = finish || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanWifi, (responData) => {\r\n      progress(responData);\r\n    });\r\n\r\n    ttlockModule.getNearbyWifi((state: number) => {\r\n      subscription.remove();\r\n      if (state === 0) {\r\n        finish!();\r\n      } else {\r\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize gateway\r\n   * @param object \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.initGateway(object, success, (errorCode: number) => {\r\n      let description = \"Init gateway fail.\";\r\n      if (errorCode === 3) {\r\n        description += \"Wrong wifi\";\r\n      } else if (errorCode === 4) {\r\n        description += \"Wrong wifi password\";\r\n      }\r\n      fail!(errorCode, description);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\nclass Ttlock {\r\n\r\n  static defaultCallback = function () { };\r\n\r\n  \r\n\r\n  /**\r\n   * Scan for nearby Bluetooth locks\r\n   * @param callback  The Callback will be executed multiple times if there is a Bluetooth lock nearby\r\n   */\r\n  static startScan(callback: null | ((lockScanModal: ScanLockModal) => void)) {\r\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    callback = callback || this.defaultCallback;\r\n    subscription = ttlockEventEmitter.addListener(TTLockEvent.ScanLock, callback);\r\n    subscriptionMap.set(TTLockEvent.ScanLock, subscription);\r\n    ttlockModule.startScan();\r\n  }\r\n\r\n  /**\r\n   * Stop scanning nearby Bluetooth locks\r\n   */\r\n  static stopScan() {\r\n    ttlockModule.stopScan();\r\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(TTLockEvent.ScanLock);\r\n  }\r\n\r\n  /**\r\n   * Initialize lock\r\n   * @param object {lockMac:\"ea:09:e2:99:33\", lockVersion:\"{\\\"protocolType\\\":5,\\\"protocolVersion\\\":3,\\\"scene\\\":2,\\\"groupId\\\":1,\\\"orgId\\\":1}\"}\r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static initLock(object: object, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.initLock(object, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Reset the lock.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetLock(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Reset the all keys.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetEkey(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Controle the lock Unlock or lock or other operations\r\n   * @param control  LockControlType\r\n   * @param lockData string\r\n   * @param success successful callback\r\n   * @param fail failed callback\r\n   */\r\n  static controlLock(control: LockControlType, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    fail = fail || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    ttlockModule.controlLock(control, lockData, (dataArray: number[]) => {\r\n      success!(dataArray[0], dataArray[1], dataArray[2]);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Create a custom passcode. \r\n   * @param passcode The password must be 4-9 digits\r\n   * @param startDate Timestamp millisecond. The start valid time of the password.\r\n   * @param endDate Timestamp millisecond. The expiration time of the password\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Change the password and the expiry date of the password.\r\n   * @param passcodeOrigin origin password\r\n   * @param passcodeNew new password must be 4-9 digits\r\n   * @param startDate Timestamp millisecond. The start valid time of the password.\r\n   * @param endDate Timestamp millisecond. The expiration time of the password\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the passcode.\r\n   * @param passcode \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * All passcode will be invalid after reset （Custom passcode and Admin passcode is still valid）\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetPasscode(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock state (unlock or lock)\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockSwitchState(lockData: string, success: null | ((state: LockState) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\r\n      let lockState = [\r\n        LockState.Locked,\r\n        LockState.Unlock,\r\n        LockState.Unknow,\r\n        LockState.CarOnLock\r\n      ][state];\r\n      success!(lockState);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Add a card to unlock the lock\r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the card.\r\n   * @param endDate Timestamp millisecond. The expiration time of the card\r\n   * @param lockData \r\n   * @param progress \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addCard(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n\r\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddCardProgrress, () => {\r\n      progress();\r\n    });\r\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\r\n      subscription.remove();\r\n      success!(cardNumber);\r\n    }, (errorCode: number, errorDesc: string) => {\r\n      subscription.remove();\r\n      fail!(errorCode, errorDesc);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Modify the validity period of the card\r\n   * @param cardNumber \r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the card.\r\n   * @param endDate Timestamp millisecond. The expiration time of the card\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the card\r\n   * @param cardNumber \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Clear all cards\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllCards(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Add  fingerprint to unlock the lock\r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\r\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\r\n   * @param lockData \r\n   * @param progress \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addFingerprint(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n\r\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddFingerprintProgress, (dataArray: number[]) => {\r\n      progress!(dataArray[0], dataArray[1]);\r\n    });\r\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\r\n      subscription.remove();\r\n      success!(fingerprintNumber);\r\n    }, (errorCode: number, errorDesc: string) => {\r\n      subscription.remove();\r\n      fail!(errorCode, errorDesc);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Modify the validity period of the fingerprint\r\n   * @param fingerprintNumber \r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\r\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the fingerprint\r\n   * @param fingerprintNumber \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Clear all fingerprints\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Modify admin passcode\r\n   * @param adminPasscode  adminPasscode must be 4-9 digits\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock time\r\n   * @param timestamp  Millisecond.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock time\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockTime(lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Read the operation record of the lock. \r\n   * @param type LockRecordType\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockOperationRecord(type: LockRecordType, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockOperationRecord(type, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock automatic locking periodic time\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock automatic locking periodic time\r\n   * @param seconds \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock remote unlock switch state\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock remote unlock switch state\r\n   * @param isOn \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get config of the lock\r\n   * @param config \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockConfig(config: LockConfigType, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockConfig(config, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set config of the lock\r\n   * @param config \r\n   * @param isOn \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockConfig(config: LockConfigType, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the lock always unlock.\r\n   * @param mode LockPassageMode\r\n   * @param days \r\n   * type = LockPassageMode.Weekly then days should be 1~7 Monday ~ Sunday, [1,3,6] \r\n   * type = LockPassageMode.Monthly then days should be 1~31, [1,7,29,31]\r\n   * @param startDate The valid time of the passage mode\r\n   * @param endDate The invalid time of the passage mode\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addPassageMode(mode: LockPassageMode, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let weekly = LockPassageMode.Weekly === mode ? days : [];\r\n    let monthly = LockPassageMode.Monthly === mode ? days : [];\r\n\r\n    ttlockModule.addPassageMode(mode, weekly, monthly, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear all passage mode\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Monitor phone's Bluetooth status\r\n   * @param callback \r\n   */\r\n  /*\r\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\r\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\r\n      let bluetoothStateList = [\r\n        { code: 0, description: \"The bluetooth state is unknow\" },\r\n        { code: 1, description: \"The bluetooth state is resetting\" },\r\n        { code: 2, description: \"Current device unsupport bluetooth\" },\r\n        { code: 3, description: \"The bluetooth is unauthorized\" },\r\n        { code: 4, description: \"The bluetooth is ok\" },\r\n        { code: 5, description: \"The bluetooth is off\" },\r\n      ]\r\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\r\n    });\r\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\r\n  }\r\n\r\n\r\n  static deleteBluetoothStateListener() {\r\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\r\n  }\r\n\r\n*/\r\n\r\n\r\n  /**\r\n   * \r\n   * @param callback \r\n   */\r\n  static getBluetoothState(callback: (state: BluetoothState) => void) {\r\n    callback = callback || this.defaultCallback;\r\n    ttlockModule.getBluetoothState((state: number) => {\r\n      var bluetoothState = [\r\n        BluetoothState.Unknow,\r\n        BluetoothState.Resetting,\r\n        BluetoothState.Unsupport,\r\n        BluetoothState.Unauthorized,\r\n        BluetoothState.On,\r\n        BluetoothState.Off\r\n      ][state];\r\n      callback(bluetoothState);\r\n    });\r\n  }\r\n\r\n  static supportFunction(fuction: LockFunction, lockData: string, callback: (isSupport: boolean) => void) {\r\n    ttlockModule.supportFunction(fuction, lockData, callback);\r\n  }\r\n\r\n}\r\n\r\nenum BluetoothState {\r\n  Unknow = 0,\r\n  Resetting = 1,\r\n  Unsupport = 2,\r\n  Unauthorized = 3,\r\n  On = 4,\r\n  Off = 5\r\n}\r\n\r\nenum LockFunction {\r\n  Passcode = 0,\r\n  IcCard = 1,\r\n  Fingerprint = 2,\r\n  Wristband = 3,\r\n  AutoLock = 4,\r\n  DeletePasscode = 5,\r\n  ManagePasscode = 7,\r\n  Locking = 8,\r\n  PasscodeVisible = 9,\r\n  GatewayUnlock = 10,\r\n  LockFreeze = 11,\r\n  CyclePassword = 12,\r\n  DoorSensor = 13,\r\n  RemoteUnlockSwicth = 14,\r\n  AudioSwitch = 15,\r\n  NbIot = 16,\r\n  GetAdminPasscode = 18,\r\n  HtelCard = 19,\r\n  NoClock = 20,\r\n  NoBroadcastInNormal = 21,\r\n  PassageMode = 22,\r\n  TurnOffAutoLock = 23,\r\n  WirelessKeypad = 24,\r\n  Light = 25,\r\n  HotelCardBlacklist = 26,\r\n  IdentityCard = 27,\r\n  TamperAlert = 28,\r\n  ResetButton = 29,\r\n  PrivacyLock = 30,\r\n  DeadLock = 32,\r\n  CyclicCardOrFingerprint = 34,\r\n  FingerVein = 37,\r\n  NbAwake = 39,\r\n}\r\n\r\nenum LockRecordType {\r\n  Latest = 0,\r\n  All = 1\r\n}\r\n\r\n\r\nenum LockConfigType {\r\n  Audio = 0,\r\n  PasscodeVisible = 1,\r\n  Freeze = 2,\r\n  TamperAlert = 3,\r\n  ResetButton = 4,\r\n  PrivacyLock = 5\r\n}\r\n\r\nenum LockPassageMode {\r\n  Weekly = 0,\r\n  Monthly = 1\r\n}\r\n\r\nenum LockControlType {\r\n  Unlock = 0,\r\n  Lock = 1\r\n}\r\n\r\nenum LockState {\r\n  Locked = 0,\r\n  Unlock = 1,\r\n  Unknow = 2,\r\n  CarOnLock\r\n}\r\n\r\nenum ConnectState {\r\n  Timeout = 0,\r\n  Success = 1,\r\n  Fail = 2\r\n}\r\n\r\nenum TTLockEvent {\r\n  ScanLock = \"EventScanLock\",\r\n  AddCardProgrress = \"EventAddCardProgrress\",\r\n  AddFingerprintProgress = \"EventAddFingerprintProgrress\",\r\n  ListenBluetoothState = \"EventBluetoothState\"\r\n};\r\n\r\n\r\nenum GatewayEvent {\r\n  ScanGateway = \"EventScanGateway\",\r\n  ScanWifi = \"EventScanWifi\"\r\n};\r\n\r\n\r\n\r\n\r\nexport { Ttlock, TtGateway, BluetoothState, LockFunction, LockRecordType, LockConfigType, LockPassageMode, LockControlType, LockState, ConnectState }\r\nexport * from './types'\r\n"]}