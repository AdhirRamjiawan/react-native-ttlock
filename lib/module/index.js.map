{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","ttlockModule","Ttlock","ttlockEventEmitter","subscriptionMap","Map","TtGateway","startScan","callback","subscription","get","event","scanGateway","undefined","remove","addListener","set","startScanGateway","stopScan","stopScanGateway","delete","connect","mac","success","fail","defaultCallback","stateList","code","description","state","getNearbyWifi","progress","finish","scanWifi","responData","initGateway","object","errorCode","scanLock","initLock","resetLock","lockData","resetEkey","controlLock","control","dataArray","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","addCard","cycleList","addCardProgrress","cardNumber","console","log","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","addFingerprintProgress","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockOperateRecord","type","getLockAutomaticLockingPeriodicTime","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","addPassageMode","days","weekly","lockPassageModeEnum","monthly","clearAllPassageModes","addBluetoothStateListener","bluetoothState","bluetoothStateList","deleteBluetoothStateListener","supportFunction","fuction","Object","freeze","unlock","lock","latest","all","audio","passcodeVisible","tamperAlert","resetButton","privacyLock","icCard","fingerprint","wristband","autoLock","managePasscode","locking","gatewayUnlock","lockFreeze","cyclePassword","doorSensor","remoteUnlockSwicth","audioSwitch","nbIot","getAdminPasscode","htelCard","noClock","noBroadcastInNormal","passageMode","turnOffAutoLock","wirelessKeypad","light","hotelCardBlacklist","identityCard","deadLock","cyclicCardOrFingerprint","fingerVein","nbAwake"],"mappings":"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","sourcesContent":["import {\r\n  NativeModules,\r\n  NativeEventEmitter,\r\n  // EmitterSubscription,\r\n} from 'react-native';\r\n\r\nimport type { ScanGatewayModal, ScanLockModal, InitGatewayParam, CardFingerprintCycleParam, ScanWifiModal, InitGatewayModal } from './types'\r\n\r\nconst ttlockModule = NativeModules.Ttlock;\r\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\r\n\r\n\r\n\r\nconst subscriptionMap = new Map();\r\n\r\nclass TtGateway {\r\n  static defaultCallback = function () { };\r\n\r\n  static event = {\r\n    scanGateway: \"EventScanGateway\",\r\n    scanWifi: \"EventScanWifi\"\r\n  };\r\n\r\n  /**\r\n   * Scan for nearby gateways （Only newly powered gateways can be scanned）\r\n   * @param callback  If there is a reenergized gateway nearby, the callback will be performed multiple times\r\n   */\r\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\r\n    let subscription = subscriptionMap.get(TtGateway.event.scanGateway)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    subscription = ttlockEventEmitter.addListener(TtGateway.event.scanGateway, callback);\r\n    subscriptionMap.set(TtGateway.event.scanGateway, subscription);\r\n    ttlockModule.startScanGateway();\r\n  }\r\n\r\n  /**\r\n   * Stop scanning nearby Bluetooth locks\r\n   */\r\n  static stopScan() {\r\n    ttlockModule.stopScanGateway();\r\n    let subscription = subscriptionMap.get(TtGateway.event.scanGateway)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(TtGateway.event.scanGateway);\r\n  }\r\n\r\n  /**\r\n   * Connected to the gateway Only newly powered gateways can be connected）\r\n   * @param mac \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static connect(mac: string, success: ((state: number, description: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let stateList = [\r\n      { code: 0, description: \"The bluetooth connect timeout\" },\r\n      { code: 1, description: \"The bluetooth connect success\" },\r\n      { code: 2, description: \"The bluetooth connect fail\" }\r\n    ]\r\n    ttlockModule.connect(mac, (state: number) => {\r\n      if (state === 1) {\r\n        success(stateList[state].code, stateList[state].description);\r\n      } else {\r\n        fail!(stateList[state].code, stateList[state].description);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Read wifi near the gateway\r\n   * @param progress \r\n   * @param finish \r\n   * @param fail \r\n   */\r\n  static getNearbyWifi(progress: ((scanWifiModal: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    finish = finish || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let subscription = ttlockEventEmitter.addListener(TtGateway.event.scanWifi, (responData) => {\r\n      progress(responData);\r\n    });\r\n\r\n    ttlockModule.getNearbyWifi((state: number) => {\r\n      subscription.remove();\r\n      if (state === 0) {\r\n        finish!();\r\n      } else {\r\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize gateway\r\n   * @param object \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.initGateway(object, success, (errorCode: number) => {\r\n      let description = \"Init gateway fail.\";\r\n      if (errorCode === 3) {\r\n        description += \"Wrong wifi\";\r\n      } else if (errorCode === 4) {\r\n        description += \"Wrong wifi password\";\r\n      }\r\n      fail(errorCode, description);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\nclass Ttlock {\r\n\r\n  static defaultCallback = function () { };\r\n\r\n  static event = {\r\n    scanLock: \"EventScanLock\",\r\n    addCardProgrress: \"EventAddCardProgrress\",\r\n    addFingerprintProgress: \"EventAddFingerprintProgrress\",\r\n    bluetoothState: \"EventBluetoothState\"\r\n  };\r\n\r\n  /**\r\n   * Scan for nearby Bluetooth locks\r\n   * @param callback  The Callback will be executed multiple times if there is a Bluetooth lock nearby\r\n   */\r\n  static startScan(callback: null | ((lockScanModal: ScanLockModal) => void)) {\r\n    let subscription = subscriptionMap.get(Ttlock.event.scanLock)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    callback = callback || this.defaultCallback;\r\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.scanLock, callback);\r\n    subscriptionMap.set(Ttlock.event.scanLock, subscription);\r\n    ttlockModule.startScan();\r\n  }\r\n\r\n  /**\r\n   * Stop scanning nearby Bluetooth locks\r\n   */\r\n  static stopScan() {\r\n    ttlockModule.stopScan();\r\n    let subscription = subscriptionMap.get(Ttlock.event.scanLock)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(Ttlock.event.scanLock);\r\n  }\r\n\r\n  /**\r\n   * Initialize lock\r\n   * @param object {lock:\"ea:09:e2:99:33\", lockVersion:\"{\\\"protocolType\\\":5,\\\"protocolVersion\\\":3,\\\"scene\\\":2,\\\"groupId\\\":1,\\\"orgId\\\":1}\"}\r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static initLock(object: object, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.initLock(object, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Reset the lock.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetLock(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Reset the all keys.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetEkey(lockData, success, fail);\r\n  }\r\n\r\n  //enum control lock\r\n  static controlEnum = Object.freeze({\r\n    unlock: 0,\r\n    lock: 1\r\n  })\r\n\r\n  /**\r\n   * Controle the lock Unlock or lock or other operations\r\n   * @param control  Ttlock.controlEnum.unlock or Ttlock.controlEnum.lock\r\n   * @param lockData string\r\n   * @param success successful callback\r\n   * @param fail failed callback\r\n   */\r\n  static controlLock(control: number, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    fail = fail || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    ttlockModule.controlLock(control, lockData, (dataArray:number[])=>{\r\n      success(dataArray[0],dataArray[1],dataArray[2]);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Create a custom passcode. \r\n   * @param passcode The password must be 4-9 digits\r\n   * @param startDate Timestamp millisecond. The start valid time of the password.\r\n   * @param endDate Timestamp millisecond. The expiration time of the password\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Change the password and the expiry date of the password.\r\n   * @param passcodeOrigin origin password\r\n   * @param passcodeNew new password must be 4-9 digits\r\n   * @param startDate Timestamp millisecond. The start valid time of the password.\r\n   * @param endDate Timestamp millisecond. The expiration time of the password\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the passcode.\r\n   * @param passcode \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * All passcode will be invalid after reset （Custom passcode and Admin passcode is still valid）\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetPasscode(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock state (unlock or lock)\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockSwitchState(lockData: string, success: null | ((state: number, description: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let stateList = [\r\n      { code: 0, description: \"The lock state is locked\" },\r\n      { code: 1, description: \"The lock state is unlocked\" },\r\n      { code: 2, description: \"The lock state is unknow\" },\r\n      { code: 3, description: \"A car on the lock\" },\r\n    ]\r\n\r\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\r\n      success!(stateList[state].code, stateList[state].description);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Add a card to unlock the lock\r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the card.\r\n   * @param endDate Timestamp millisecond. The expiration time of the card\r\n   * @param lockData \r\n   * @param progress \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addCard(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n\r\n    let subscription = ttlockEventEmitter.addListener(Ttlock.event.addCardProgrress, () => {\r\n      progress();\r\n    });\r\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\r\n      subscription.remove();\r\n      console.log(\"Success:\", cardNumber);\r\n      success!(cardNumber);\r\n    }, (errorCode: number, errorDesc: string) => {\r\n      subscription.remove();\r\n      fail!(errorCode, errorDesc);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Modify the validity period of the card\r\n   * @param cardNumber \r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the card.\r\n   * @param endDate Timestamp millisecond. The expiration time of the card\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the card\r\n   * @param cardNumber \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Clear all cards\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllCards(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Add  fingerprint to unlock the lock\r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\r\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\r\n   * @param lockData \r\n   * @param progress \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addFingerprint(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n\r\n    let subscription = ttlockEventEmitter.addListener(Ttlock.event.addFingerprintProgress, (dataArray: number[]) => {\r\n      progress!(dataArray[0], dataArray[1]);\r\n    });\r\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\r\n      subscription.remove();\r\n      success!(fingerprintNumber);\r\n    }, (errorCode: number, errorDesc: string) => {\r\n      subscription.remove();\r\n      fail!(errorCode, errorDesc);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Modify the validity period of the fingerprint\r\n   * @param fingerprintNumber \r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\r\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the fingerprint\r\n   * @param fingerprintNumber \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Clear all fingerprints\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Modify admin passcode\r\n   * @param adminPasscode  adminPasscode must be 4-9 digits\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock time\r\n   * @param timestamp  Millisecond.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock time\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockTime(lockData, success, fail);\r\n  }\r\n\r\n  //enum config lock\r\n  static lockRecordEnum = Object.freeze({\r\n    latest: 0,\r\n    all: 1\r\n  })\r\n  /**\r\n   * Read the operation record of the lock. \r\n   * @param type Ttlock.lockRecordEnum.latest or Ttlock.lockRecordEnum.all\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockOperateRecord(type: number, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockOperateRecord(type, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock automatic locking periodic time\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock automatic locking periodic time\r\n   * @param seconds \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock remote unlock switch state\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock remote unlock switch state\r\n   * @param isOn \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\r\n  }\r\n\r\n\r\n  //enum config lock\r\n  static lockConfigEnum = Object.freeze({\r\n    audio: 0,\r\n    passcodeVisible: 1,\r\n    freeze: 2,\r\n    tamperAlert: 3,\r\n    resetButton: 4,\r\n    privacyLock: 5\r\n  })\r\n  /**\r\n   * Get config of the lock\r\n   * @param config Reference  Ttlock.lockConfigEnum\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockConfig(config: number, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockConfig(config, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set config of the lock\r\n   * @param config Reference  Ttlock.lockConfigEnum\r\n   * @param isOn \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockConfig(config: number, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\r\n  }\r\n\r\n\r\n  //enum  lock passage mode\r\n  static lockPassageModeEnum = Object.freeze({\r\n    weekly: 0,\r\n    monthly: 1\r\n  })\r\n  /**\r\n   * Set the lock always unlock.\r\n   * @param type Ttlock.lockPassageModeEnum.weekly or Ttlock.lockPassageModeEnum.monthly\r\n   * @param days type = Ttlock.lockPassageModeEnum.weekly then days should be 1~7 Monday ~ Sunday, [1,3,6]. type = Ttlock.lockPassageModeEnum.monthly then days should be 1~31, [1,7,29,31]\r\n   * @param startDate The valid time of the passage mode\r\n   * @param endDate The invalid time of the passage mode\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addPassageMode(type: number, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let weekly = this.lockPassageModeEnum.weekly === type ? days : [];\r\n    let monthly = this.lockPassageModeEnum.monthly === type ? days : [];\r\n\r\n    ttlockModule.addPassageMode(type, weekly, monthly, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear all passage mode\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Monitor phone's Bluetooth status\r\n   * @param callback \r\n   */\r\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\r\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\r\n      let bluetoothStateList = [\r\n        { code: 0, description: \"The bluetooth state is unknow\" },\r\n        { code: 1, description: \"The bluetooth state is resetting\" },\r\n        { code: 2, description: \"Current device unsupport bluetooth\" },\r\n        { code: 3, description: \"The bluetooth is unauthorized\" },\r\n        { code: 4, description: \"The bluetooth is ok\" },\r\n        { code: 5, description: \"The bluetooth is off\" },\r\n      ]\r\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\r\n    });\r\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\r\n  }\r\n\r\n\r\n  static deleteBluetoothStateListener() {\r\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\r\n  }\r\n\r\n  //enum config lock\r\n  static lockFunction = Object.freeze({\r\n    passcode: 0,\r\n    icCard: 1,\r\n    fingerprint: 2,\r\n    wristband: 3,\r\n    autoLock: 4,\r\n    deletePasscode: 5,\r\n    managePasscode: 7,\r\n    locking: 8,\r\n    passcodeVisible: 9,\r\n    gatewayUnlock: 10,\r\n    lockFreeze: 11,\r\n    cyclePassword: 12,\r\n    doorSensor: 13,\r\n    remoteUnlockSwicth: 14,\r\n    audioSwitch: 15,\r\n    nbIot: 16,\r\n    getAdminPasscode: 18,\r\n    htelCard: 19,\r\n    noClock: 20,\r\n    noBroadcastInNormal: 21,\r\n    passageMode: 22,\r\n    turnOffAutoLock: 23,\r\n    wirelessKeypad: 24,\r\n    light: 25,\r\n    hotelCardBlacklist: 26,\r\n    identityCard: 27,\r\n    tamperAlert: 28,\r\n    resetButton: 29,\r\n    privacyLock: 30,\r\n    deadLock: 32,\r\n    cyclicCardOrFingerprint: 34,\r\n    fingerVein: 37,\r\n    nbAwake: 39,\r\n  })\r\n  static supportFunction(fuction: number, lockData: string, callback: (isSupport: boolean) => void) {\r\n    ttlockModule.supportFunction(fuction, lockData, callback);\r\n  }\r\n\r\n}\r\n\r\nexport { Ttlock, TtGateway }\r\nexport * from './types'\r\n"]}