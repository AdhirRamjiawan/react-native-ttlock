{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","ttlockModule","Ttlock","ttlockEventEmitter","subscriptionMap","Map","TtGateway","startScan","callback","subscription","get","GatewayEvent","ScanGateway","undefined","remove","addListener","set","startScanGateway","stopScan","stopScanGateway","delete","connect","mac","defaultCallback","state","connectState","ConnectState","Timeout","Success","Fail","getNearbyWifi","progress","finish","fail","ScanWifi","responData","initGateway","object","success","errorCode","description","TTLockEvent","ScanLock","initLock","resetLock","lockData","resetEkey","controlLock","control","dataArray","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","lockState","LockState","Locked","Unlock","Unknow","CarOnLock","addCard","cycleList","AddCardProgrress","cardNumber","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","AddFingerprintProgress","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockOperationRecord","type","getLockAutomaticLockingPeriodicTime","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","addPassageMode","mode","days","weekly","LockPassageMode","Weekly","monthly","Monthly","clearAllPassageModes","getBluetoothState","bluetoothState","BluetoothState","Resetting","Unsupport","Unauthorized","On","Off","supportFunction","fuction","LockFunction","LockRecordType","LockConfigType","LockControlType"],"mappings":"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","sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  // EmitterSubscription,\n} from 'react-native';\n\nimport type { ScanGatewayModal, ScanLockModal, InitGatewayParam, CardFingerprintCycleParam, ScanWifiModal, InitGatewayModal } from './types'\n\nconst ttlockModule = NativeModules.Ttlock;\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\n\n\n\nconst subscriptionMap = new Map();\n\nclass TtGateway {\n  static defaultCallback = function () { };\n\n  /**\n   * Scan for nearby gateways （Only newly powered gateways can be scanned）\n   * @param callback  If there is a reenergized gateway nearby, the callback will be performed multiple times\n   */\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanGateway, callback);\n    subscriptionMap.set(GatewayEvent.ScanGateway, subscription);\n    ttlockModule.startScanGateway();\n  }\n\n  /**\n   * Stop scanning nearby Bluetooth locks\n   */\n  static stopScan() {\n    ttlockModule.stopScanGateway();\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(GatewayEvent.ScanGateway);\n  }\n\n  /**\n   * Connected to the gateway Only newly powered gateways can be connected）\n   * @param mac \n   * @param callback \n   */\n  static connect(mac: string, callback: ((state: ConnectState) => void)) {\n    callback = callback || this.defaultCallback;\n    ttlockModule.connect(mac, (state: number) => {\n      let connectState = [ConnectState.Timeout,ConnectState.Success,ConnectState.Fail][state];\n      callback!(connectState);\n    });\n  }\n\n  /**\n   * Read wifi near the gateway\n   * @param progress \n   * @param finish \n   * @param fail \n   */\n  static getNearbyWifi(progress: ((scanWifiModal: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    finish = finish || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanWifi, (responData) => {\n      progress(responData);\n    });\n\n    ttlockModule.getNearbyWifi((state: number) => {\n      subscription.remove();\n      if (state === 0) {\n        finish!();\n      } else {\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\n      }\n    });\n  }\n\n  /**\n   * Initialize gateway\n   * @param object \n   * @param success \n   * @param fail \n   */\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initGateway(object, success, (errorCode: number) => {\n      let description = \"Init gateway fail.\";\n      if (errorCode === 3) {\n        description += \"Wrong wifi\";\n      } else if (errorCode === 4) {\n        description += \"Wrong wifi password\";\n      }\n      fail!(errorCode, description);\n    });\n  }\n\n}\n\n\nclass Ttlock {\n\n  static defaultCallback = function () { };\n\n  \n\n  /**\n   * Scan for nearby Bluetooth locks\n   * @param callback  The Callback will be executed multiple times if there is a Bluetooth lock nearby\n   */\n  static startScan(callback: null | ((lockScanModal: ScanLockModal) => void)) {\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    callback = callback || this.defaultCallback;\n    subscription = ttlockEventEmitter.addListener(TTLockEvent.ScanLock, callback);\n    subscriptionMap.set(TTLockEvent.ScanLock, subscription);\n    ttlockModule.startScan();\n  }\n\n  /**\n   * Stop scanning nearby Bluetooth locks\n   */\n  static stopScan() {\n    ttlockModule.stopScan();\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(TTLockEvent.ScanLock);\n  }\n\n  /**\n   * Initialize lock\n   * @param object {lockMac:\"ea:09:e2:99:33\", lockVersion:\"{\\\"protocolType\\\":5,\\\"protocolVersion\\\":3,\\\"scene\\\":2,\\\"groupId\\\":1,\\\"orgId\\\":1}\"}\n   * @param success \n   * @param fail \n   */\n  static initLock(object: object, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.initLock(object, success, fail);\n  }\n\n  /**\n   * Reset the lock.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetLock(lockData, success, fail);\n  }\n\n  /**\n   * Reset the all keys.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetEkey(lockData, success, fail);\n  }\n\n  /**\n   * Controle the lock Unlock or lock or other operations\n   * @param control  LockControlType\n   * @param lockData string\n   * @param success successful callback\n   * @param fail failed callback\n   */\n  static controlLock(control: LockControlType, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    fail = fail || this.defaultCallback;\n    success = success || this.defaultCallback;\n    ttlockModule.controlLock(control, lockData, (dataArray: number[]) => {\n      success!(dataArray[0], dataArray[1], dataArray[2]);\n    }, fail);\n  }\n\n  /**\n   * Create a custom passcode. \n   * @param passcode The password must be 4-9 digits\n   * @param startDate Timestamp millisecond. The start valid time of the password.\n   * @param endDate Timestamp millisecond. The expiration time of the password\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Change the password and the expiry date of the password.\n   * @param passcodeOrigin origin password\n   * @param passcodeNew new password must be 4-9 digits\n   * @param startDate Timestamp millisecond. The start valid time of the password.\n   * @param endDate Timestamp millisecond. The expiration time of the password\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the passcode.\n   * @param passcode \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\n  }\n\n  /**\n   * All passcode will be invalid after reset （Custom passcode and Admin passcode is still valid）\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.resetPasscode(lockData, success, fail);\n  }\n\n  /**\n   * Get the lock state (unlock or lock)\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockSwitchState(lockData: string, success: null | ((state: LockState) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\n      let lockState = [\n        LockState.Locked,\n        LockState.Unlock,\n        LockState.Unknow,\n        LockState.CarOnLock\n      ][state];\n      success!(lockState);\n    }, fail);\n  }\n\n  /**\n   * Add a card to unlock the lock\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the card.\n   * @param endDate Timestamp millisecond. The expiration time of the card\n   * @param lockData \n   * @param progress \n   * @param success \n   * @param fail \n   */\n  static addCard(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddCardProgrress, () => {\n      progress();\n    });\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\n      subscription.remove();\n      success!(cardNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  /**\n   * Modify the validity period of the card\n   * @param cardNumber \n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the card.\n   * @param endDate Timestamp millisecond. The expiration time of the card\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the card\n   * @param cardNumber \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\n  }\n\n  /**\n   * Clear all cards\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllCards(lockData, success, fail);\n  }\n\n  /**\n   * Add  fingerprint to unlock the lock\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\n   * @param lockData \n   * @param progress \n   * @param success \n   * @param fail \n   */\n  static addFingerprint(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    progress = progress || this.defaultCallback;\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddFingerprintProgress, (dataArray: number[]) => {\n      progress!(dataArray[0], dataArray[1]);\n    });\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\n      subscription.remove();\n      success!(fingerprintNumber);\n    }, (errorCode: number, errorDesc: string) => {\n      subscription.remove();\n      fail!(errorCode, errorDesc);\n    });\n  }\n\n  /**\n   * Modify the validity period of the fingerprint\n   * @param fingerprintNumber \n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    cycleList = cycleList || [];\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\n  }\n\n  /**\n   * Delete the fingerprint\n   * @param fingerprintNumber \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\n  }\n\n  /**\n   * Clear all fingerprints\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\n  }\n\n  /**\n   * Modify admin passcode\n   * @param adminPasscode  adminPasscode must be 4-9 digits\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\n  }\n\n  /**\n   * Set the lock time\n   * @param timestamp  Millisecond.\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock time\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockTime(lockData, success, fail);\n  }\n\n\n  /**\n   * Read the operation record of the lock. \n   * @param type LockRecordType\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockOperationRecord(type: LockRecordType, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockOperationRecord(type, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock automatic locking periodic time\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, success, fail);\n  }\n\n  /**\n   * Set the lock automatic locking periodic time\n   * @param seconds \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\n  }\n\n  /**\n   * Get the lock remote unlock switch state\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\n  }\n\n  /**\n   * Set the lock remote unlock switch state\n   * @param isOn \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\n  }\n\n  /**\n   * Get config of the lock\n   * @param config \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static getLockConfig(config: LockConfigType, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.getLockConfig(config, lockData, success, fail);\n  }\n\n  /**\n   * Set config of the lock\n   * @param config \n   * @param isOn \n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static setLockConfig(config: LockConfigType, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\n  }\n\n\n  /**\n   * Set the lock always unlock.\n   * @param mode LockPassageMode\n   * @param days \n   * type = LockPassageMode.Weekly then days should be 1~7 Monday ~ Sunday, [1,3,6] \n   * type = LockPassageMode.Monthly then days should be 1~31, [1,7,29,31]\n   * @param startDate The valid time of the passage mode\n   * @param endDate The invalid time of the passage mode\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static addPassageMode(mode: LockPassageMode, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n\n    let weekly = LockPassageMode.Weekly === mode ? days : [];\n    let monthly = LockPassageMode.Monthly === mode ? days : [];\n\n    ttlockModule.addPassageMode(mode, weekly, monthly, startDate, endDate, lockData, success, fail);\n  }\n\n\n  /**\n   * Clear all passage mode\n   * @param lockData \n   * @param success \n   * @param fail \n   */\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\n    success = success || this.defaultCallback;\n    fail = fail || this.defaultCallback;\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\n  }\n\n\n  /**\n   * Monitor phone's Bluetooth status\n   * @param callback \n   */\n  /*\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove()\n    }\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\n      let bluetoothStateList = [\n        { code: 0, description: \"The bluetooth state is unknow\" },\n        { code: 1, description: \"The bluetooth state is resetting\" },\n        { code: 2, description: \"Current device unsupport bluetooth\" },\n        { code: 3, description: \"The bluetooth is unauthorized\" },\n        { code: 4, description: \"The bluetooth is ok\" },\n        { code: 5, description: \"The bluetooth is off\" },\n      ]\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\n    });\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\n  }\n\n\n  static deleteBluetoothStateListener() {\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\n    if (subscription !== undefined) {\n      subscription.remove();\n    }\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\n  }\n\n*/\n\n\n  /**\n   * \n   * @param callback \n   */\n  static getBluetoothState(callback: (state: BluetoothState) => void) {\n    callback = callback || this.defaultCallback;\n    ttlockModule.getBluetoothState((state: number) => {\n      var bluetoothState = [\n        BluetoothState.Unknow,\n        BluetoothState.Resetting,\n        BluetoothState.Unsupport,\n        BluetoothState.Unauthorized,\n        BluetoothState.On,\n        BluetoothState.Off\n      ][state];\n      callback(bluetoothState);\n    });\n  }\n\n  static supportFunction(fuction: LockFunction, lockData: string, callback: (isSupport: boolean) => void) {\n    ttlockModule.supportFunction(fuction, lockData, callback);\n  }\n\n}\n\nenum BluetoothState {\n  Unknow = 0,\n  Resetting = 1,\n  Unsupport = 2,\n  Unauthorized = 3,\n  On = 4,\n  Off = 5\n}\n\nenum LockFunction {\n  Passcode = 0,\n  IcCard = 1,\n  Fingerprint = 2,\n  Wristband = 3,\n  AutoLock = 4,\n  DeletePasscode = 5,\n  ManagePasscode = 7,\n  Locking = 8,\n  PasscodeVisible = 9,\n  GatewayUnlock = 10,\n  LockFreeze = 11,\n  CyclePassword = 12,\n  DoorSensor = 13,\n  RemoteUnlockSwicth = 14,\n  AudioSwitch = 15,\n  NbIot = 16,\n  GetAdminPasscode = 18,\n  HtelCard = 19,\n  NoClock = 20,\n  NoBroadcastInNormal = 21,\n  PassageMode = 22,\n  TurnOffAutoLock = 23,\n  WirelessKeypad = 24,\n  Light = 25,\n  HotelCardBlacklist = 26,\n  IdentityCard = 27,\n  TamperAlert = 28,\n  ResetButton = 29,\n  PrivacyLock = 30,\n  DeadLock = 32,\n  CyclicCardOrFingerprint = 34,\n  FingerVein = 37,\n  NbAwake = 39,\n}\n\nenum LockRecordType {\n  Latest = 0,\n  All = 1\n}\n\n\nenum LockConfigType {\n  Audio = 0,\n  PasscodeVisible = 1,\n  Freeze = 2,\n  TamperAlert = 3,\n  ResetButton = 4,\n  PrivacyLock = 5\n}\n\nenum LockPassageMode {\n  Weekly = 0,\n  Monthly = 1\n}\n\nenum LockControlType {\n  Unlock = 0,\n  Lock = 1\n}\n\nenum LockState {\n  Locked = 0,\n  Unlock = 1,\n  Unknow = 2,\n  CarOnLock\n}\n\nenum ConnectState {\n  Timeout = 0,\n  Success = 1,\n  Fail = 2\n}\n\nenum TTLockEvent {\n  ScanLock = \"EventScanLock\",\n  AddCardProgrress = \"EventAddCardProgrress\",\n  AddFingerprintProgress = \"EventAddFingerprintProgrress\",\n  ListenBluetoothState = \"EventBluetoothState\"\n};\n\n\nenum GatewayEvent {\n  ScanGateway = \"EventScanGateway\",\n  ScanWifi = \"EventScanWifi\"\n};\n\n\n\n\nexport { Ttlock, TtGateway, BluetoothState, LockFunction, LockRecordType, LockConfigType, LockPassageMode, LockControlType, LockState, ConnectState }\nexport * from './types'\n"]}