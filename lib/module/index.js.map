{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","ttlockModule","Ttlock","ttlockEventEmitter","subscriptionMap","Map","TtGateway","startScan","callback","subscription","get","GatewayEvent","ScanGateway","undefined","remove","addListener","set","startScanGateway","stopScan","stopScanGateway","delete","connect","mac","defaultCallback","state","connectState","ConnectState","Timeout","Success","Fail","getNearbyWifi","progress","finish","fail","ScanWifi","responData","initGateway","object","success","errorCode","description","TTLockEvent","ScanLock","initLock","getLockVersionWithLockMac","lockMac","resetLock","lockData","resetEkey","controlLock","control","dataArray","createCustomPasscode","passcode","startDate","endDate","modifyPasscode","passcodeOrigin","passcodeNew","deletePasscode","resetPasscode","getLockSwitchState","lockState","LockState","Locked","Unlock","Unknow","CarOnLock","addCard","cycleList","AddCardProgrress","cardNumber","errorDesc","modifyCardValidityPeriod","deleteCard","clearAllCards","addFingerprint","AddFingerprintProgress","fingerprintNumber","modifyFingerprintValidityPeriod","deleteFingerprint","clearAllFingerprints","modifyAdminPasscode","adminPasscode","setLockTime","timestamp","getLockTime","getLockOperationRecord","type","getLockAutomaticLockingPeriodicTime","data","setLockAutomaticLockingPeriodicTime","seconds","getLockRemoteUnlockSwitchState","setLockRemoteUnlockSwitchState","isOn","getLockConfig","config","setLockConfig","addPassageMode","mode","days","weekly","LockPassageMode","Weekly","monthly","Monthly","clearAllPassageModes","getBluetoothState","bluetoothState","BluetoothState","Resetting","Unsupport","Unauthorized","On","Off","supportFunction","fuction","LockFunction","LockRecordType","LockConfigType","LockControlType","GatewayType"],"mappings":"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","sourcesContent":["import {\r\n  NativeModules,\r\n  NativeEventEmitter,\r\n  // EmitterSubscription,\r\n} from 'react-native';\r\n\r\nimport type { ScanGatewayModal, ScanLockModal, InitGatewayParam, CardFingerprintCycleParam, ScanWifiModal, InitGatewayModal, LockVersion } from './types'\r\n\r\nconst ttlockModule = NativeModules.Ttlock;\r\nconst ttlockEventEmitter = new NativeEventEmitter(ttlockModule);\r\n\r\nconst subscriptionMap = new Map();\r\n\r\nclass TtGateway {\r\n  static defaultCallback = function () { };\r\n\r\n  /**\r\n   * Scan for nearby gateways （Only newly powered gateways can be scanned）\r\n   * @param callback  If there is a reenergized gateway nearby, the callback will be performed multiple times\r\n   */\r\n  static startScan(callback: ((scanGatewayModal: ScanGatewayModal) => void)) {\r\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanGateway, callback);\r\n    subscriptionMap.set(GatewayEvent.ScanGateway, subscription);\r\n    ttlockModule.startScanGateway();\r\n  }\r\n\r\n  /**\r\n   * Stop scanning nearby Bluetooth locks\r\n   */\r\n  static stopScan() {\r\n    ttlockModule.stopScanGateway();\r\n    let subscription = subscriptionMap.get(GatewayEvent.ScanGateway)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(GatewayEvent.ScanGateway);\r\n  }\r\n\r\n  /**\r\n   * Connected to the gateway Only newly powered gateways can be connected）\r\n   * @param mac \r\n   * @param callback \r\n   */\r\n  static connect(mac: string, callback: ((state: ConnectState) => void)) {\r\n    callback = callback || this.defaultCallback;\r\n    ttlockModule.connect(mac, (state: number) => {\r\n      let connectState = [ConnectState.Timeout,ConnectState.Success,ConnectState.Fail][state];\r\n      callback!(connectState);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Read wifi near the gateway\r\n   * @param progress \r\n   * @param finish \r\n   * @param fail \r\n   */\r\n  static getNearbyWifi(progress: ((scanWifiModal: ScanWifiModal[]) => void), finish: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    finish = finish || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let subscription = ttlockEventEmitter.addListener(GatewayEvent.ScanWifi, (responData) => {\r\n      progress(responData);\r\n    });\r\n\r\n    ttlockModule.getNearbyWifi((state: number) => {\r\n      subscription.remove();\r\n      if (state === 0) {\r\n        finish!();\r\n      } else {\r\n        fail!(1, \"Failed to get nearby wifi. Please confirm whether there is wifi nearby or reconnect to the gateway try again\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize gateway\r\n   * @param object \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static initGateway(object: InitGatewayParam, success: ((initGatewayModal: InitGatewayModal) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.initGateway(object, success, (errorCode: number) => {\r\n      let description = \"Init gateway fail.\";\r\n      if (errorCode === 3) {\r\n        description += \"Wrong wifi\";\r\n      } else if (errorCode === 4) {\r\n        description += \"Wrong wifi password\";\r\n      }\r\n      fail!(errorCode, description);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\nclass Ttlock {\r\n\r\n  static defaultCallback = function () { };\r\n\r\n  \r\n\r\n  /**\r\n   * Scan for nearby Bluetooth locks\r\n   * @param callback  The Callback will be executed multiple times if there is a Bluetooth lock nearby\r\n   */\r\n  static startScan(callback: null | ((scanLockModal: ScanLockModal) => void)) {\r\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    callback = callback || this.defaultCallback;\r\n    subscription = ttlockEventEmitter.addListener(TTLockEvent.ScanLock, callback);\r\n    subscriptionMap.set(TTLockEvent.ScanLock, subscription);\r\n    ttlockModule.startScan();\r\n  }\r\n\r\n  /**\r\n   * Stop scanning nearby Bluetooth locks\r\n   */\r\n  static stopScan() {\r\n    ttlockModule.stopScan();\r\n    let subscription = subscriptionMap.get(TTLockEvent.ScanLock)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(TTLockEvent.ScanLock);\r\n  }\r\n\r\n  /**\r\n   * Initialize lock\r\n   * @param object {lockMac:\"ea:09:e2:99:33\", lockVersion:\"{\\\"protocolType\\\":5,\\\"protocolVersion\\\":3,\\\"scene\\\":2,\\\"groupId\\\":1,\\\"orgId\\\":1}\"}\r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static initLock(object: object, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.initLock(object, success, fail);\r\n  }\r\n\r\n\r\n  static getLockVersionWithLockMac(lockMac: string, success: null | ((lockVersion: LockVersion) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockVersionWithLockMac(lockMac, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Reset the lock.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetLock(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetLock(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Reset the all keys.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetEkey(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetEkey(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Controle the lock Unlock or lock or other operations\r\n   * @param control  LockControlType\r\n   * @param lockData string\r\n   * @param success successful callback\r\n   * @param fail failed callback\r\n   */\r\n  static controlLock(control: LockControlType, lockData: string, success: null | ((lockTime: number, electricQuantity: number, uniqueId: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    fail = fail || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    ttlockModule.controlLock(control, lockData, (dataArray: number[]) => {\r\n      success!(dataArray[0], dataArray[1], dataArray[2]);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Create a custom passcode. \r\n   * @param passcode The password must be 4-9 digits\r\n   * @param startDate Timestamp millisecond. The start valid time of the password.\r\n   * @param endDate Timestamp millisecond. The expiration time of the password\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static createCustomPasscode(passcode: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.createCustomPasscode(passcode, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Change the password and the expiry date of the password.\r\n   * @param passcodeOrigin origin password\r\n   * @param passcodeNew new password must be 4-9 digits\r\n   * @param startDate Timestamp millisecond. The start valid time of the password.\r\n   * @param endDate Timestamp millisecond. The expiration time of the password\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyPasscode(passcodeOrigin: string, passcodeNew: string, startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.modifyPasscode(passcodeOrigin, passcodeNew, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the passcode.\r\n   * @param passcode \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deletePasscode(passcode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deletePasscode(passcode, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * All passcode will be invalid after reset （Custom passcode and Admin passcode is still valid）\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static resetPasscode(lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.resetPasscode(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock state (unlock or lock)\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockSwitchState(lockData: string, success: null | ((state: LockState) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    ttlockModule.getLockSwitchState(lockData, (state: number) => {\r\n      let lockState = [\r\n        LockState.Locked,\r\n        LockState.Unlock,\r\n        LockState.Unknow,\r\n        LockState.CarOnLock\r\n      ][state];\r\n      success!(lockState);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Add a card to unlock the lock\r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the card.\r\n   * @param endDate Timestamp millisecond. The expiration time of the card\r\n   * @param lockData \r\n   * @param progress \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addCard(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: (() => void), success: null | ((cardNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n\r\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddCardProgrress, () => {\r\n      progress();\r\n    });\r\n    ttlockModule.addCard(cycleList, startDate, endDate, lockData, (cardNumber: string) => {\r\n      subscription.remove();\r\n      success!(cardNumber);\r\n    }, (errorCode: number, errorDesc: string) => {\r\n      subscription.remove();\r\n      fail!(errorCode, errorDesc);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Modify the validity period of the card\r\n   * @param cardNumber \r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the card.\r\n   * @param endDate Timestamp millisecond. The expiration time of the card\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyCardValidityPeriod(cardNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n    ttlockModule.modifyCardValidityPeriod(cardNumber, cycleList, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the card\r\n   * @param cardNumber \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deleteCard(cardNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deleteCard(cardNumber, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Clear all cards\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllCards(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllCards(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Add  fingerprint to unlock the lock\r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\r\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\r\n   * @param lockData \r\n   * @param progress \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addFingerprint(cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, progress: null | ((currentCount: number, totalCount: number) => void), success: null | ((fingerprintNumber: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    progress = progress || this.defaultCallback;\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n\r\n    let subscription = ttlockEventEmitter.addListener(TTLockEvent.AddFingerprintProgress, (dataArray: number[]) => {\r\n      progress!(dataArray[0], dataArray[1]);\r\n    });\r\n    ttlockModule.addFingerprint(cycleList, startDate, endDate, lockData, (fingerprintNumber: string) => {\r\n      subscription.remove();\r\n      success!(fingerprintNumber);\r\n    }, (errorCode: number, errorDesc: string) => {\r\n      subscription.remove();\r\n      fail!(errorCode, errorDesc);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Modify the validity period of the fingerprint\r\n   * @param fingerprintNumber \r\n   * @param cycleList Periodic unlocking. You can set it to null if you don't need it\r\n   * @param startDate Timestamp millisecond. The start valid time of the fingerprint.\r\n   * @param endDate Timestamp millisecond. The expiration time of the fingerprint\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyFingerprintValidityPeriod(fingerprintNumber: string, cycleList: null | CardFingerprintCycleParam[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    cycleList = cycleList || [];\r\n    ttlockModule.modifyFingerprintValidityPeriod(fingerprintNumber, cycleList, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Delete the fingerprint\r\n   * @param fingerprintNumber \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static deleteFingerprint(fingerprintNumber: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.deleteFingerprint(fingerprintNumber, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Clear all fingerprints\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllFingerprints(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllFingerprints(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Modify admin passcode\r\n   * @param adminPasscode  adminPasscode must be 4-9 digits\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static modifyAdminPasscode(adminPasscode: string, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.modifyAdminPasscode(adminPasscode, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock time\r\n   * @param timestamp  Millisecond.\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockTime(timestamp: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockTime(timestamp, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock time\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockTime(lockData: string, success: null | ((lockTimestamp: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockTime(lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Read the operation record of the lock. \r\n   * @param type LockRecordType\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockOperationRecord(type: LockRecordType, lockData: string, success: null | ((records: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockOperationRecord(type, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock automatic locking periodic time\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockAutomaticLockingPeriodicTime(lockData: string, success: null | ((currentTime: number, maxTime: number, minTime: number) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockAutomaticLockingPeriodicTime(lockData, (data: number[]) => {\r\n      success!(data[0],data[1],data[2]);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock automatic locking periodic time\r\n   * @param seconds \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockAutomaticLockingPeriodicTime(seconds: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockAutomaticLockingPeriodicTime(seconds, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get the lock remote unlock switch state\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockRemoteUnlockSwitchState(lockData: string, success: null | ((isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockRemoteUnlockSwitchState(lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Set the lock remote unlock switch state\r\n   * @param isOn \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockRemoteUnlockSwitchState(isOn: boolean, lockData: string, success: null | ((lockData: string) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockRemoteUnlockSwitchState(isOn, lockData, success, fail);\r\n  }\r\n\r\n  /**\r\n   * Get config of the lock\r\n   * @param config \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static getLockConfig(config: LockConfigType, lockData: string, success: null | ((type: number, isOn: boolean) => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.getLockConfig(config, lockData, (data: any[]) => {\r\n      success!(data[0],data[1]);\r\n    }, fail);\r\n  }\r\n\r\n  /**\r\n   * Set config of the lock\r\n   * @param config \r\n   * @param isOn \r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static setLockConfig(config: LockConfigType, isOn: boolean, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.setLockConfig(config, isOn, lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the lock always unlock.\r\n   * @param mode LockPassageMode\r\n   * @param days \r\n   * type = LockPassageMode.Weekly then days should be 1~7 Monday ~ Sunday, [1,3,6] \r\n   * type = LockPassageMode.Monthly then days should be 1~31, [1,7,29,31]\r\n   * @param startDate The valid time of the passage mode\r\n   * @param endDate The invalid time of the passage mode\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static addPassageMode(mode: LockPassageMode, days: number[], startDate: number, endDate: number, lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n\r\n    let weekly = LockPassageMode.Weekly === mode ? days : [];\r\n    let monthly = LockPassageMode.Monthly === mode ? days : [];\r\n\r\n    ttlockModule.addPassageMode(mode, weekly, monthly, startDate, endDate, lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear all passage mode\r\n   * @param lockData \r\n   * @param success \r\n   * @param fail \r\n   */\r\n  static clearAllPassageModes(lockData: string, success: null | (() => void), fail: null | ((errorCode: number, description: string) => void)) {\r\n    success = success || this.defaultCallback;\r\n    fail = fail || this.defaultCallback;\r\n    ttlockModule.clearAllPassageModes(lockData, success, fail);\r\n  }\r\n\r\n\r\n  /**\r\n   * Monitor phone's Bluetooth status\r\n   * @param callback \r\n   */\r\n  /*\r\n  static addBluetoothStateListener(callback: (state: number, description: string) => void) {\r\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\r\n    if (subscription !== undefined) {\r\n      subscription.remove()\r\n    }\r\n    subscription = ttlockEventEmitter.addListener(Ttlock.event.bluetoothState, (state: number) => {\r\n      let bluetoothStateList = [\r\n        { code: 0, description: \"The bluetooth state is unknow\" },\r\n        { code: 1, description: \"The bluetooth state is resetting\" },\r\n        { code: 2, description: \"Current device unsupport bluetooth\" },\r\n        { code: 3, description: \"The bluetooth is unauthorized\" },\r\n        { code: 4, description: \"The bluetooth is ok\" },\r\n        { code: 5, description: \"The bluetooth is off\" },\r\n      ]\r\n      callback(bluetoothStateList[state].code, bluetoothStateList[state].description);\r\n    });\r\n    subscriptionMap.set(Ttlock.event.bluetoothState, subscription);\r\n  }\r\n\r\n\r\n  static deleteBluetoothStateListener() {\r\n    let subscription = subscriptionMap.get(Ttlock.event.bluetoothState)\r\n    if (subscription !== undefined) {\r\n      subscription.remove();\r\n    }\r\n    subscriptionMap.delete(Ttlock.event.bluetoothState);\r\n  }\r\n\r\n*/\r\n\r\n\r\n  /**\r\n   * \r\n   * @param callback \r\n   */\r\n  static getBluetoothState(callback: (state: BluetoothState) => void) {\r\n    callback = callback || this.defaultCallback;\r\n    ttlockModule.getBluetoothState((state: number) => {\r\n      var bluetoothState = [\r\n        BluetoothState.Unknow,\r\n        BluetoothState.Resetting,\r\n        BluetoothState.Unsupport,\r\n        BluetoothState.Unauthorized,\r\n        BluetoothState.On,\r\n        BluetoothState.Off\r\n      ][state];\r\n      callback(bluetoothState);\r\n    });\r\n  }\r\n\r\n  static supportFunction(fuction: LockFunction, lockData: string, callback: (isSupport: boolean) => void) {\r\n    ttlockModule.supportFunction(fuction, lockData, callback);\r\n  }\r\n\r\n}\r\n\r\nenum BluetoothState {\r\n  Unknow = 0,\r\n  Resetting = 1,\r\n  Unsupport = 2,\r\n  Unauthorized = 3,\r\n  On = 4,\r\n  Off = 5\r\n}\r\n\r\nenum LockFunction {\r\n  Passcode = 0,\r\n  IcCard = 1,\r\n  Fingerprint = 2,\r\n  Wristband = 3,\r\n  AutoLock = 4,\r\n  DeletePasscode = 5,\r\n  ManagePasscode = 7,\r\n  Locking = 8,\r\n  PasscodeVisible = 9,\r\n  GatewayUnlock = 10,\r\n  LockFreeze = 11,\r\n  CyclePassword = 12,\r\n  DoorSensor = 13,\r\n  RemoteUnlockSwicth = 14,\r\n  AudioSwitch = 15,\r\n  NbIot = 16,\r\n  GetAdminPasscode = 18,\r\n  HtelCard = 19,\r\n  NoClock = 20,\r\n  NoBroadcastInNormal = 21,\r\n  PassageMode = 22,\r\n  TurnOffAutoLock = 23,\r\n  WirelessKeypad = 24,\r\n  Light = 25,\r\n  HotelCardBlacklist = 26,\r\n  IdentityCard = 27,\r\n  TamperAlert = 28,\r\n  ResetButton = 29,\r\n  PrivacyLock = 30,\r\n  DeadLock = 32,\r\n  CyclicCardOrFingerprint = 34,\r\n  FingerVein = 37,\r\n  NbAwake = 39,\r\n}\r\n\r\nenum LockRecordType {\r\n  Latest = 0,\r\n  All = 1\r\n}\r\n\r\n\r\nenum LockConfigType {\r\n  Audio = 0,\r\n  PasscodeVisible = 1,\r\n  Freeze = 2,\r\n  TamperAlert = 3,\r\n  ResetButton = 4,\r\n  PrivacyLock = 5\r\n}\r\n\r\nenum LockPassageMode {\r\n  Weekly = 0,\r\n  Monthly = 1\r\n}\r\n\r\nenum LockControlType {\r\n  Unlock = 0,\r\n  Lock = 1\r\n}\r\n\r\nenum LockState {\r\n  Locked = 0,\r\n  Unlock = 1,\r\n  Unknow = 2,\r\n  CarOnLock\r\n}\r\n\r\nenum ConnectState {\r\n  Timeout = 0,\r\n  Success = 1,\r\n  Fail = 2\r\n}\r\n\r\nenum TTLockEvent {\r\n  ScanLock = \"EventScanLock\",\r\n  AddCardProgrress = \"EventAddCardProgrress\",\r\n  AddFingerprintProgress = \"EventAddFingerprintProgrress\",\r\n  ListenBluetoothState = \"EventBluetoothState\"\r\n}\r\n\r\n\r\nenum GatewayEvent {\r\n  ScanGateway = \"EventScanGateway\",\r\n  ScanWifi = \"EventScanWifi\"\r\n}\r\n\r\n\r\nenum GatewayType {\r\n  G2 =2,\r\n  G3 =3,\r\n  G4 =4\r\n}\r\n\r\nexport { Ttlock, TtGateway, BluetoothState, LockFunction, LockRecordType, LockConfigType, LockPassageMode, LockControlType, LockState, ConnectState, GatewayType}\r\nexport * from './types'\r\n"]}